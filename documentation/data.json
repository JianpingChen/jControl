{
    "project": {
        "name": "jControl API",
        "description": "jControl: a library for object oriented javascript programming",
        "version": "1.0.0"
    },
    "files": {
        "lib\\comm\\asyncCallParam.js": {
            "name": "lib\\comm\\asyncCallParam.js",
            "modules": {},
            "classes": {
                "asynCallParam": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\comm\\asyncGetCall.js": {
            "name": "lib\\comm\\asyncGetCall.js",
            "modules": {},
            "classes": {
                "asyncGetCall": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\comm\\asyncPostCall.js": {
            "name": "lib\\comm\\asyncPostCall.js",
            "modules": {},
            "classes": {
                "asyncPostCall": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\comm\\formPost.js": {
            "name": "lib\\comm\\formPost.js",
            "modules": {},
            "classes": {
                "formPost": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\comm\\restCallBase.js": {
            "name": "lib\\comm\\restCallBase.js",
            "modules": {},
            "classes": {
                "restCallBase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\comm\\restDelete.js": {
            "name": "lib\\comm\\restDelete.js",
            "modules": {},
            "classes": {
                "restDelete": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\comm\\restGet.js": {
            "name": "lib\\comm\\restGet.js",
            "modules": {},
            "classes": {
                "restGet": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\comm\\restGetAll.js": {
            "name": "lib\\comm\\restGetAll.js",
            "modules": {},
            "classes": {
                "restGetAll": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\comm\\restPost.js": {
            "name": "lib\\comm\\restPost.js",
            "modules": {},
            "classes": {
                "restPost": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\comm\\restPut.js": {
            "name": "lib\\comm\\restPut.js",
            "modules": {},
            "classes": {
                "restPut": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\comm\\serviceProxy.js": {
            "name": "lib\\comm\\serviceProxy.js",
            "modules": {},
            "classes": {
                "serviceProxy": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\D3Charts\\d3BubbleChart.js": {
            "name": "lib\\controls\\D3Charts\\d3BubbleChart.js",
            "modules": {},
            "classes": {
                "d3BubbleChart": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\D3Charts\\d3Charting.js": {
            "name": "lib\\controls\\D3Charts\\d3Charting.js",
            "modules": {},
            "classes": {
                "d3Charting": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\googleCharts\\barChart.js": {
            "name": "lib\\controls\\googleCharts\\barChart.js",
            "modules": {
                "googleCharts": 1
            },
            "classes": {
                "barChart": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\googleCharts\\chartBase.js": {
            "name": "lib\\controls\\googleCharts\\chartBase.js",
            "modules": {},
            "classes": {
                "chartBase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\googleCharts\\columnChart.js": {
            "name": "lib\\controls\\googleCharts\\columnChart.js",
            "modules": {},
            "classes": {
                "columnChart": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\googleCharts\\lineChart.js": {
            "name": "lib\\controls\\googleCharts\\lineChart.js",
            "modules": {},
            "classes": {
                "lineChart": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\googleCharts\\pieChart.js": {
            "name": "lib\\controls\\googleCharts\\pieChart.js",
            "modules": {},
            "classes": {
                "pieChart": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\googleMaps\\hybridMap.js": {
            "name": "lib\\controls\\googleMaps\\hybridMap.js",
            "modules": {
                "googleMaps": 1
            },
            "classes": {
                "hybridMap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\googleMaps\\mapBase.js": {
            "name": "lib\\controls\\googleMaps\\mapBase.js",
            "modules": {},
            "classes": {
                "mapBase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\googleMaps\\roadMap.js": {
            "name": "lib\\controls\\googleMaps\\roadMap.js",
            "modules": {},
            "classes": {
                "roadMap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\googleMaps\\satelliteMap.js": {
            "name": "lib\\controls\\googleMaps\\satelliteMap.js",
            "modules": {},
            "classes": {
                "satelliteMap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\googleMaps\\terrainMap.js": {
            "name": "lib\\controls\\googleMaps\\terrainMap.js",
            "modules": {},
            "classes": {
                "terrainMap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\dialogButtonRow.js": {
            "name": "lib\\controls\\dialogButtonRow.js",
            "modules": {},
            "classes": {
                "dialogButtonRow": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\dialogSkeleton.js": {
            "name": "lib\\controls\\dialogSkeleton.js",
            "modules": {},
            "classes": {
                "dialogSkeleton": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\dialogTitleRow.js": {
            "name": "lib\\controls\\dialogTitleRow.js",
            "modules": {},
            "classes": {
                "dialogTitleRow": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\enumMouseButton.js": {
            "name": "lib\\controls\\enumMouseButton.js",
            "modules": {},
            "classes": {
                "enumMouseButton": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\fileBrowseButton.js": {
            "name": "lib\\controls\\fileBrowseButton.js",
            "modules": {},
            "classes": {
                "fileBrowseButton": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\modalDialog.js": {
            "name": "lib\\controls\\modalDialog.js",
            "modules": {},
            "classes": {
                "modalDialog": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\popup.js": {
            "name": "lib\\controls\\popup.js",
            "modules": {},
            "classes": {
                "popup": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\popupMoveHandler.js": {
            "name": "lib\\controls\\popupMoveHandler.js",
            "modules": {},
            "classes": {
                "popupMoveHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\valueContainer.js": {
            "name": "lib\\controls\\valueContainer.js",
            "modules": {},
            "classes": {
                "valueContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\controls\\windowOverlay.js": {
            "name": "lib\\controls\\windowOverlay.js",
            "modules": {},
            "classes": {
                "windowOverlay": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\a.js": {
            "name": "lib\\elements\\a.js",
            "modules": {},
            "classes": {
                "a": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\area.js": {
            "name": "lib\\elements\\area.js",
            "modules": {},
            "classes": {
                "area": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\article.js": {
            "name": "lib\\elements\\article.js",
            "modules": {},
            "classes": {
                "article": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\audio.js": {
            "name": "lib\\elements\\audio.js",
            "modules": {},
            "classes": {
                "audio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\bdo.js": {
            "name": "lib\\elements\\bdo.js",
            "modules": {},
            "classes": {
                "bdo": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\body.js": {
            "name": "lib\\elements\\body.js",
            "modules": {},
            "classes": {
                "body": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\br.js": {
            "name": "lib\\elements\\br.js",
            "modules": {},
            "classes": {
                "br": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\button.js": {
            "name": "lib\\elements\\button.js",
            "modules": {},
            "classes": {
                "button": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\canvas.js": {
            "name": "lib\\elements\\canvas.js",
            "modules": {},
            "classes": {
                "canvas": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\caption.js": {
            "name": "lib\\elements\\caption.js",
            "modules": {},
            "classes": {
                "caption": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\checkBox.js": {
            "name": "lib\\elements\\checkBox.js",
            "modules": {},
            "classes": {
                "checkBox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\containerElement.js": {
            "name": "lib\\elements\\containerElement.js",
            "modules": {},
            "classes": {
                "containerElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\datetimeInput.js": {
            "name": "lib\\elements\\datetimeInput.js",
            "modules": {},
            "classes": {
                "datetimeInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\decentMouseEvent.js": {
            "name": "lib\\elements\\decentMouseEvent.js",
            "modules": {},
            "classes": {
                "decentMouseEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\div.js": {
            "name": "lib\\elements\\div.js",
            "modules": {},
            "classes": {
                "div": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\divButton.js": {
            "name": "lib\\elements\\divButton.js",
            "modules": {},
            "classes": {
                "divButton": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\documentElement.js": {
            "name": "lib\\elements\\documentElement.js",
            "modules": {},
            "classes": {
                "documentElement": 1,
                "link": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\element.js": {
            "name": "lib\\elements\\element.js",
            "modules": {},
            "classes": {
                "element": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\embed.js": {
            "name": "lib\\elements\\embed.js",
            "modules": {},
            "classes": {
                "embed": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\fieldset.js": {
            "name": "lib\\elements\\fieldset.js",
            "modules": {},
            "classes": {
                "fieldset": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\figCaption.js": {
            "name": "lib\\elements\\figCaption.js",
            "modules": {},
            "classes": {
                "figCaption": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\figure.js": {
            "name": "lib\\elements\\figure.js",
            "modules": {},
            "classes": {
                "figure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\fileInput.js": {
            "name": "lib\\elements\\fileInput.js",
            "modules": {},
            "classes": {
                "fileInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\floatInput.js": {
            "name": "lib\\elements\\floatInput.js",
            "modules": {},
            "classes": {
                "floatInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\footer.js": {
            "name": "lib\\elements\\footer.js",
            "modules": {},
            "classes": {
                "footer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\form.js": {
            "name": "lib\\elements\\form.js",
            "modules": {},
            "classes": {
                "form": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\h1.js": {
            "name": "lib\\elements\\h1.js",
            "modules": {},
            "classes": {
                "h1": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\h2.js": {
            "name": "lib\\elements\\h2.js",
            "modules": {},
            "classes": {
                "h2": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\h3.js": {
            "name": "lib\\elements\\h3.js",
            "modules": {},
            "classes": {
                "h3": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\h4.js": {
            "name": "lib\\elements\\h4.js",
            "modules": {},
            "classes": {
                "h4": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\h5.js": {
            "name": "lib\\elements\\h5.js",
            "modules": {},
            "classes": {
                "h5": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\h6.js": {
            "name": "lib\\elements\\h6.js",
            "modules": {},
            "classes": {
                "h6": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\header.js": {
            "name": "lib\\elements\\header.js",
            "modules": {},
            "classes": {
                "header": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\hr.js": {
            "name": "lib\\elements\\hr.js",
            "modules": {},
            "classes": {
                "hr": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\iframe.js": {
            "name": "lib\\elements\\iframe.js",
            "modules": {},
            "classes": {
                "iframe": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\img.js": {
            "name": "lib\\elements\\img.js",
            "modules": {},
            "classes": {
                "img": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\inputElement.js": {
            "name": "lib\\elements\\inputElement.js",
            "modules": {},
            "classes": {
                "inputElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\intInput.js": {
            "name": "lib\\elements\\intInput.js",
            "modules": {},
            "classes": {
                "intInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\keygen.js": {
            "name": "lib\\elements\\keygen.js",
            "modules": {},
            "classes": {
                "keygen": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\label.js": {
            "name": "lib\\elements\\label.js",
            "modules": {},
            "classes": {
                "label": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\legend.js": {
            "name": "lib\\elements\\legend.js",
            "modules": {},
            "classes": {
                "legend": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\li.js": {
            "name": "lib\\elements\\li.js",
            "modules": {},
            "classes": {
                "li": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\map.js": {
            "name": "lib\\elements\\map.js",
            "modules": {},
            "classes": {
                "map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\numericInput.js": {
            "name": "lib\\elements\\numericInput.js",
            "modules": {},
            "classes": {
                "numericInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\objectElement.js": {
            "name": "lib\\elements\\objectElement.js",
            "modules": {},
            "classes": {
                "objectElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\ol.js": {
            "name": "lib\\elements\\ol.js",
            "modules": {},
            "classes": {
                "ol": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\optGroup.js": {
            "name": "lib\\elements\\optGroup.js",
            "modules": {},
            "classes": {
                "optGroup": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\option.js": {
            "name": "lib\\elements\\option.js",
            "modules": {},
            "classes": {
                "option": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\p.js": {
            "name": "lib\\elements\\p.js",
            "modules": {},
            "classes": {
                "p": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\param.js": {
            "name": "lib\\elements\\param.js",
            "modules": {},
            "classes": {
                "param": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\position.js": {
            "name": "lib\\elements\\position.js",
            "modules": {},
            "classes": {
                "position": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\radioButton.js": {
            "name": "lib\\elements\\radioButton.js",
            "modules": {},
            "classes": {
                "radioButton": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\scrollPanel.js": {
            "name": "lib\\elements\\scrollPanel.js",
            "modules": {},
            "classes": {
                "scrollPanel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\select.js": {
            "name": "lib\\elements\\select.js",
            "modules": {},
            "classes": {
                "select": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\size.js": {
            "name": "lib\\elements\\size.js",
            "modules": {},
            "classes": {
                "size": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\source.js": {
            "name": "lib\\elements\\source.js",
            "modules": {},
            "classes": {
                "source": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\span.js": {
            "name": "lib\\elements\\span.js",
            "modules": {},
            "classes": {
                "span": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\spanText.js": {
            "name": "lib\\elements\\spanText.js",
            "modules": {},
            "classes": {
                "spanText": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\svg.js": {
            "name": "lib\\elements\\svg.js",
            "modules": {},
            "classes": {
                "svg": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\table.js": {
            "name": "lib\\elements\\table.js",
            "modules": {},
            "classes": {
                "table": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\tbody.js": {
            "name": "lib\\elements\\tbody.js",
            "modules": {},
            "classes": {
                "tbody": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\td.js": {
            "name": "lib\\elements\\td.js",
            "modules": {},
            "classes": {
                "td": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\textArea.js": {
            "name": "lib\\elements\\textArea.js",
            "modules": {},
            "classes": {
                "textArea": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\textBlock.js": {
            "name": "lib\\elements\\textBlock.js",
            "modules": {},
            "classes": {
                "textBlock": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\textInput.js": {
            "name": "lib\\elements\\textInput.js",
            "modules": {},
            "classes": {
                "textInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\textNode.js": {
            "name": "lib\\elements\\textNode.js",
            "modules": {},
            "classes": {
                "textNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\tfoot.js": {
            "name": "lib\\elements\\tfoot.js",
            "modules": {},
            "classes": {
                "tfoot": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\th.js": {
            "name": "lib\\elements\\th.js",
            "modules": {},
            "classes": {
                "th": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\thead.js": {
            "name": "lib\\elements\\thead.js",
            "modules": {},
            "classes": {
                "thead": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\touchEvent.js": {
            "name": "lib\\elements\\touchEvent.js",
            "modules": {},
            "classes": {
                "touchEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\tr.js": {
            "name": "lib\\elements\\tr.js",
            "modules": {},
            "classes": {
                "tr": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\track.js": {
            "name": "lib\\elements\\track.js",
            "modules": {},
            "classes": {
                "track": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\ul.js": {
            "name": "lib\\elements\\ul.js",
            "modules": {},
            "classes": {
                "ul": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\valueElement.js": {
            "name": "lib\\elements\\valueElement.js",
            "modules": {},
            "classes": {
                "valueElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\video.js": {
            "name": "lib\\elements\\video.js",
            "modules": {},
            "classes": {
                "video": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\elements\\windowElement.js": {
            "name": "lib\\elements\\windowElement.js",
            "modules": {},
            "classes": {
                "windowElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\acceptType.js": {
            "name": "lib\\observe\\acceptType.js",
            "modules": {},
            "classes": {
                "acceptType": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\bindButtonCommand.js": {
            "name": "lib\\observe\\bindButtonCommand.js",
            "modules": {},
            "classes": {
                "bindButtonCommand": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\bindFileInput.js": {
            "name": "lib\\observe\\bindFileInput.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\bindFileProperty.js": {
            "name": "lib\\observe\\bindFileProperty.js",
            "modules": {},
            "classes": {
                "bindFileProperty": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\bindProperty.js": {
            "name": "lib\\observe\\bindProperty.js",
            "modules": {},
            "classes": {
                "bindProperty": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\collectionModelBase.js": {
            "name": "lib\\observe\\collectionModelBase.js",
            "modules": {},
            "classes": {
                "collectionModelBase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\command.js": {
            "name": "lib\\observe\\command.js",
            "modules": {},
            "classes": {
                "command": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\customEvent.js": {
            "name": "lib\\observe\\customEvent.js",
            "modules": {},
            "classes": {
                "customEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\fileHandlingModelFactory.js": {
            "name": "lib\\observe\\fileHandlingModelFactory.js",
            "modules": {},
            "classes": {
                "fileHandlingModelFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\filePropertyModel.js": {
            "name": "lib\\observe\\filePropertyModel.js",
            "modules": {},
            "classes": {
                "filePropertyModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\fileTypeModel.js": {
            "name": "lib\\observe\\fileTypeModel.js",
            "modules": {},
            "classes": {
                "fileTypeModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\fileValueModel.js": {
            "name": "lib\\observe\\fileValueModel.js",
            "modules": {},
            "classes": {
                "fileValueModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\guid.js": {
            "name": "lib\\observe\\guid.js",
            "modules": {},
            "classes": {
                "guid": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\modelBase.js": {
            "name": "lib\\observe\\modelBase.js",
            "modules": {},
            "classes": {
                "modelBase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\modelFactory.js": {
            "name": "lib\\observe\\modelFactory.js",
            "modules": {},
            "classes": {
                "modelFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\multiFilePropertyModel.js": {
            "name": "lib\\observe\\multiFilePropertyModel.js",
            "modules": {},
            "classes": {
                "multiFilePropertyModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\observable.js": {
            "name": "lib\\observe\\observable.js",
            "modules": {},
            "classes": {
                "observable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\observe\\observableCollection.js": {
            "name": "lib\\observe\\observableCollection.js",
            "modules": {},
            "classes": {
                "observableCollection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\jControl.js": {
            "name": "lib\\jControl.js",
            "modules": {
                "comm": 1,
                "controls": 1,
                "elements": 1,
                "observe": 1,
                "advanced": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "comm": {
            "name": "comm",
            "submodules": {},
            "classes": {
                "asynCallParam": 1,
                "asyncGetCall": 1,
                "asyncPostCall": 1,
                "formPost": 1,
                "restCallBase": 1,
                "restDelete": 1,
                "restGet": 1,
                "restGetAll": 1,
                "restPost": 1,
                "restPut": 1,
                "serviceProxy": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib\\comm\\serviceProxy.js",
            "line": 30,
            "description": "Provides classes for client server communication"
        },
        "controls": {
            "name": "controls",
            "submodules": {
                "D3Chart": 1,
                "googleCharts": 1,
                "googleMaps": 1
            },
            "classes": {
                "d3BubbleChart": 1,
                "d3Charting": 1,
                "barChart": 1,
                "chartBase": 1,
                "columnChart": 1,
                "lineChart": 1,
                "pieChart": 1,
                "hybridMap": 1,
                "mapBase": 1,
                "roadMap": 1,
                "satelliteMap": 1,
                "terrainMap": 1,
                "dialogButtonRow": 1,
                "dialogSkeleton": 1,
                "dialogTitleRow": 1,
                "enumMouseButton": 1,
                "fileBrowseButton": 1,
                "modalDialog": 1,
                "popup": 1,
                "popupMoveHandler": 1,
                "valueContainer": 1,
                "windowOverlay": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib\\controls\\windowOverlay.js",
            "line": 33,
            "description": "Provides reusable user interface controls",
            "extends": "div"
        },
        "D3Chart": {
            "name": "D3Chart",
            "submodules": {},
            "classes": {
                "d3BubbleChart": 1,
                "d3Charting": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "controls",
            "namespace": "",
            "description": "An example chart class that draws a bubble chart using d3 library. Content of this class is based on example provided by d3: http://bl.ocks.org/mbostock/4063269. Copyright owned by original creator and d3.",
            "file": "lib\\controls\\D3Charts\\d3Charting.js",
            "line": 35
        },
        "googleCharts": {
            "name": "googleCharts",
            "submodules": {},
            "classes": {
                "barChart": 1,
                "chartBase": 1,
                "columnChart": 1,
                "lineChart": 1,
                "pieChart": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "controls",
            "namespace": "",
            "file": "lib\\controls\\googleCharts\\pieChart.js",
            "line": 32,
            "description": "A barChart",
            "extends": "chartBase"
        },
        "googleMaps": {
            "name": "googleMaps",
            "submodules": {},
            "classes": {
                "hybridMap": 1,
                "mapBase": 1,
                "roadMap": 1,
                "satelliteMap": 1,
                "terrainMap": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "controls",
            "namespace": "",
            "file": "lib\\controls\\googleMaps\\terrainMap.js",
            "line": 32,
            "description": "A hybridMap.",
            "extends": "mapBase"
        },
        "elements": {
            "name": "elements",
            "submodules": {},
            "classes": {
                "a": 1,
                "area": 1,
                "article": 1,
                "audio": 1,
                "bdo": 1,
                "body": 1,
                "br": 1,
                "button": 1,
                "canvas": 1,
                "caption": 1,
                "checkBox": 1,
                "containerElement": 1,
                "datetimeInput": 1,
                "decentMouseEvent": 1,
                "div": 1,
                "divButton": 1,
                "documentElement": 1,
                "link": 1,
                "element": 1,
                "embed": 1,
                "fieldset": 1,
                "figCaption": 1,
                "figure": 1,
                "fileInput": 1,
                "floatInput": 1,
                "footer": 1,
                "form": 1,
                "h1": 1,
                "h2": 1,
                "h3": 1,
                "h4": 1,
                "h5": 1,
                "h6": 1,
                "header": 1,
                "hr": 1,
                "iframe": 1,
                "img": 1,
                "inputElement": 1,
                "intInput": 1,
                "keygen": 1,
                "label": 1,
                "legend": 1,
                "li": 1,
                "map": 1,
                "numericInput": 1,
                "objectElement": 1,
                "ol": 1,
                "optGroup": 1,
                "option": 1,
                "p": 1,
                "param": 1,
                "position": 1,
                "radioButton": 1,
                "scrollPanel": 1,
                "select": 1,
                "size": 1,
                "source": 1,
                "span": 1,
                "spanText": 1,
                "svg": 1,
                "table": 1,
                "tbody": 1,
                "td": 1,
                "textArea": 1,
                "textBlock": 1,
                "textInput": 1,
                "textNode": 1,
                "tfoot": 1,
                "th": 1,
                "thead": 1,
                "touchEvent": 1,
                "tr": 1,
                "track": 1,
                "ul": 1,
                "valueElement": 1,
                "video": 1,
                "windowElement": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib\\elements\\windowElement.js",
            "line": 36,
            "description": "Provides classes for constructing basic DOM elements",
            "extends": "containerElement"
        },
        "observe": {
            "name": "observe",
            "submodules": {},
            "classes": {
                "acceptType": 1,
                "bindButtonCommand": 1,
                "bindFileProperty": 1,
                "bindProperty": 1,
                "collectionModelBase": 1,
                "command": 1,
                "customEvent": 1,
                "fileHandlingModelFactory": 1,
                "filePropertyModel": 1,
                "fileTypeModel": 1,
                "fileValueModel": 1,
                "guid": 1,
                "modelBase": 1,
                "modelFactory": 1,
                "multiFilePropertyModel": 1,
                "observable": 1,
                "observableCollection": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib\\observe\\observableCollection.js",
            "line": 31,
            "description": "Provides classes to support data binding, command binding, and event notification",
            "extends": "bindFileInput"
        },
        "advanced": {
            "name": "advanced",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib\\jControl.js",
            "line": 56,
            "description": "Provides advanced user interface controls available through a commercial license"
        }
    },
    "classes": {
        "asynCallParam": {
            "name": "asynCallParam",
            "shortname": "asynCallParam",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "comm",
            "namespace": "",
            "file": "lib\\comm\\asyncCallParam.js",
            "line": 31,
            "description": "A ajax call parameter",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "parameter name",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "parameter value",
                    "type": "String"
                }
            ]
        },
        "asyncGetCall": {
            "name": "asyncGetCall",
            "shortname": "asyncGetCall",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "comm",
            "namespace": "",
            "file": "lib\\comm\\asyncGetCall.js",
            "line": 31,
            "description": "An ajax GET call",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "an object with the following properties:\n\nclassName {string} not used for logic but for debugging purpose to identify the object;\n\nrelativePath {string} relative path to a serviceProxy urlRoot;\n\ncallbackParam {object} optional, additional parameter to pass back in successCallback or failurCallback;\n\nsuccessCallback {function} function to call after the call succeeded. Data returned from the call as well as callbackParam will be passed into this function;\n\nfailureCallback {function} function to call after the call failed. jqXHR, textStatus, errorThrown, and callbackParam will be passed into this function.",
                    "type": "Object"
                }
            ]
        },
        "asyncPostCall": {
            "name": "asyncPostCall",
            "shortname": "asyncPostCall",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "comm",
            "namespace": "",
            "file": "lib\\comm\\asyncPostCall.js",
            "line": 31,
            "description": "An ajax POST call",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "an object with the following properties:\n\nclassName {string} not used for logic but for debugging purpose to identify the object;\n\nrelativePath {string} relative path to a serviceProxy urlRoot;\n\ndata { string } serialized data;\n\ncallbackParam {object} optional, additional parameter to pass back in successCallback or failurCallback;\n\nsuccessCallback {function} function to call after the call succeeded. Data returned from the call as well as callbackParam will be passed into this function;\n\nfailureCallback {function} function to call after the call failed. jqXHR, textStatus, errorThrown, and callbackParam will be passed into this function.",
                    "type": "Object"
                }
            ]
        },
        "formPost": {
            "name": "formPost",
            "shortname": "formPost",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "comm",
            "namespace": "",
            "file": "lib\\comm\\formPost.js",
            "line": 32,
            "description": "Operation to post serialized model to server by form submit. Used to post model with file properties. When there is no file properties in the model, use asyncPostCall is a better choice.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": ", an object with the following properties:\n\nmodelParamName {string} key in Request.Form for serializedModel value;\n\nserializedModel {string} JSON serialized data to be interpreted by server;\n\nrelativePath {string} url path relative to a serviceProxy's urlRoot;\n\ncallbackParam {Any} parameter to be passed back in callback function onSubmitted;\n\nonSubmitted {function} callback function to be called after the submit operation received response from server. This function will be called with (responseText, callbackParam) when response is received;\n\nfileUploadForm { object } an object constructed by form class in elements folder. File input controls must be included in the form to upload file(s) to the server.",
                    "type": "Object"
                }
            ]
        },
        "restCallBase": {
            "name": "restCallBase",
            "shortname": "restCallBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "comm",
            "namespace": "",
            "file": "lib\\comm\\restCallBase.js",
            "line": 31,
            "description": "Base class for RESTful API calls.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "an object with the following properties:\n\nclassName {string} not used for logic but for debugging purpose to identify the object;\n\nrelativePath {string} relative path to a serviceProxy urlRoot;\n\ncallbackParam {object} optional, additional parameter to pass back in successCallback, redirectCallback, or failurCallback;\n\nsuccessCallback {function} function to call after the call succeeded. This function will be called with (data, callbackParam) when the call succeeded. This function is called when the response status is 200 - 299.\n\nredirectCallback {function} function to call after the call succeeded but returned status is a redirect, 300 - 399. (jqXHR, textStatus, responseText, callbackParam) will be passed into this function. \n\nfailureCallback {function} function to call after the call failed. (jqXHR, textStatus, responseText, callbackParam) will be passed into this function. This function is called when the response status is 400 and above.",
                    "type": "Object"
                }
            ]
        },
        "restDelete": {
            "name": "restDelete",
            "shortname": "restDelete",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "comm",
            "namespace": "",
            "file": "lib\\comm\\restDelete.js",
            "line": 31,
            "description": "DELETE single instance RESTful API call.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "resourceId",
                    "description": "identifier of the resource instance. It may take the shape of {folder}/{subfolder}/{id}.",
                    "type": "String"
                },
                {
                    "name": "option",
                    "description": "an object with the following properties:\n\nclassName {string} not used for logic but for debugging purpose to identify the object;\n\ncallbackParam {object} optional, additional parameter to pass back in successCallback, redirectCallback, or failurCallback;\n\nsuccessCallback {function} function to call after the call succeeded. This function will be called with (data, callbackParam) when the call succeeded. Data returned will be in JSON format as being parsed by JSON.parse before calling the callback function. This function is called when the response status is 200 - 299.\n\nredirectCallback {function} function to call after the call succeeded but returned status is a redirect, 300 - 399. (jqXHR, textStatus, responseText, callbackParam) will be passed into this function. \n\nfailureCallback {function} function to call after the call failed. (jqXHR, textStatus, responseText, callbackParam) will be passed into this function. This function is called when the response status is 400 and above.",
                    "type": "Object"
                }
            ]
        },
        "restGet": {
            "name": "restGet",
            "shortname": "restGet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "comm",
            "namespace": "",
            "file": "lib\\comm\\restGet.js",
            "line": 31,
            "description": "GET single instance RESTful API call.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "resourceId",
                    "description": "identifier of the resource instance. It may take the shape of {folder}/{subfolder}/{id}.",
                    "type": "String"
                },
                {
                    "name": "option",
                    "description": "an object with the following properties:\n\nclassName {string} not used for logic but for debugging purpose to identify the object;\n\ncallbackParam {object} optional, additional parameter to pass back in successCallback, redirectCallback, or failurCallback;\n\nsuccessCallback {function} function to call after the call succeeded. This function will be called with (data, callbackParam) when the call succeeded. Data returned will be in JSON format as being parsed by JSON.parse before calling the callback function. This function is called when the response status is 200 - 299.\n\nredirectCallback {function} function to call after the call succeeded but returned status is a redirect, 300 - 399. (jqXHR, textStatus, responseText, callbackParam) will be passed into this function. \n\nfailureCallback {function} function to call after the call failed. (jqXHR, textStatus, responseText, callbackParam) will be passed into this function. This function is called when the response status is 400 and above.",
                    "type": "Object"
                }
            ]
        },
        "restGetAll": {
            "name": "restGetAll",
            "shortname": "restGetAll",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "comm",
            "namespace": "",
            "file": "lib\\comm\\restGetAll.js",
            "line": 31,
            "description": "GET ALL RESTful API call.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "option",
                    "description": "an object with the following properties:\n\nclassName {string} not used for logic but for debugging purpose to identify the object;\n\ncallbackParam {object} optional, additional parameter to pass back in successCallback, redirectCallback, or failurCallback;\n\nsuccessCallback {function} function to call after the call succeeded. This function will be called with (data, callbackParam) when the call succeeded. Data returned will be in JSON format as being parsed by JSON.parse before calling the callback function. This function is called when the response status is 200 - 299.\n\nredirectCallback {function} function to call after the call succeeded but returned status is a redirect, 300 - 399. (jqXHR, textStatus, responseText, callbackParam) will be passed into this function. \n\nfailureCallback {function} function to call after the call failed. (jqXHR, textStatus, responseText, callbackParam) will be passed into this function. This function is called when the response status is 400 and above.",
                    "type": "Object"
                }
            ]
        },
        "restPost": {
            "name": "restPost",
            "shortname": "restPost",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "comm",
            "namespace": "",
            "file": "lib\\comm\\restPost.js",
            "line": 31,
            "description": "POST single instance RESTful API call.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "data to be posted. By default, this object will be serialized by JSON.stringify before posting to the URL.",
                    "type": "Object"
                },
                {
                    "name": "option",
                    "description": "an object with the following properties:\n\nclassName {string} not used for logic but for debugging purpose to identify the object;\n\ncallbackParam {object} optional, additional parameter to pass back in successCallback, redirectCallback, or failurCallback;\n\nsuccessCallback {function} function to call after the call succeeded. This function will be called with (data, callbackParam) when the call succeeded. Data returned will be in JSON format as being parsed by JSON.parse before calling the callback function. This function is called when the response status is 200 - 299.\n\nredirectCallback {function} function to call after the call succeeded but returned status is a redirect, 300 - 399. (jqXHR, textStatus, responseText, callbackParam) will be passed into this function. \n\nfailureCallback {function} function to call after the call failed. (jqXHR, textStatus, responseText, callbackParam) will be passed into this function. This function is called when the response status is 400 and above.",
                    "type": "Object"
                }
            ]
        },
        "restPut": {
            "name": "restPut",
            "shortname": "restPut",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "comm",
            "namespace": "",
            "file": "lib\\comm\\restPut.js",
            "line": 31,
            "description": "Update single instance RESTful API call.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "resourceId",
                    "description": "identifier of the resource instance. It may take the shape of {folder}/{subfolder}/{id}.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "data to be posted. By default, this object will be serialized by JSON.stringify before posting to the URL.",
                    "type": "Object"
                },
                {
                    "name": "option",
                    "description": "an object with the following properties:\n\nclassName {string} not used for logic but for debugging purpose to identify the object;\n\ncallbackParam {object} optional, additional parameter to pass back in successCallback, redirectCallback, or failurCallback;\n\nsuccessCallback {function} function to call after the call succeeded. This function will be called with (data, callbackParam) when the call succeeded. Data returned will be in JSON format as being parsed by JSON.parse before calling the callback function. This function is called when the response status is 200 - 299.\n\nredirectCallback {function} function to call after the call succeeded but returned status is a redirect, 300 - 399. (jqXHR, textStatus, responseText, callbackParam) will be passed into this function. \n\nfailureCallback {function} function to call after the call failed. (jqXHR, textStatus, responseText, callbackParam) will be passed into this function. This function is called when the response status is 400 and above.",
                    "type": "Object"
                }
            ]
        },
        "serviceProxy": {
            "name": "serviceProxy",
            "shortname": "serviceProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "comm",
            "namespace": "",
            "file": "lib\\comm\\serviceProxy.js",
            "line": 30,
            "description": "Represents a url that other asynchronous ajax calls are relative to.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "urlRoot",
                    "description": "",
                    "type": "String"
                }
            ]
        },
        "d3BubbleChart": {
            "name": "d3BubbleChart",
            "shortname": "d3BubbleChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "namespace": "",
            "file": "lib\\controls\\D3Charts\\d3BubbleChart.js",
            "line": 12,
            "description": "An example chart class that draws a bubble chart using d3 library. Content of this class is based on example provided by d3: http://bl.ocks.org/mbostock/4063269. Copyright owned by original creator and d3.",
            "extends": "d3Charting",
            "submodule": "D3Chart",
            "is_constructor": 1,
            "params": [
                {
                    "name": "shared",
                    "description": "used to pass protected members to derived class",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "optional, parameters for the chart",
                    "type": "Object"
                }
            ]
        },
        "d3Charting": {
            "name": "d3Charting",
            "shortname": "d3Charting",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "namespace": "",
            "file": "lib\\controls\\D3Charts\\d3Charting.js",
            "line": 35,
            "description": "Base class for d3 charting classes. Application must include the following line in the header section for d3 charts to work. \n\n<script type=\"text/javascript\" src=\"http://d3js.org/d3.v3.min.js\"></script>",
            "extends": "div",
            "submodule": "D3Chart",
            "is_constructor": 1,
            "params": [
                {
                    "name": "shared",
                    "description": "Optional. Used to pass protected members to derived class.",
                    "type": "Object"
                }
            ]
        },
        "barChart": {
            "name": "barChart",
            "shortname": "barChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "submodule": "googleCharts",
            "namespace": "",
            "file": "lib\\controls\\googleCharts\\barChart.js",
            "line": 32,
            "description": "A barChart",
            "extends": "chartBase",
            "is_constructor": 1,
            "params": [
                {
                    "name": "shared",
                    "description": "used to pass protected methods down to derived classes",
                    "type": "Object"
                }
            ]
        },
        "chartBase": {
            "name": "chartBase",
            "shortname": "chartBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "submodule": "googleCharts",
            "namespace": "",
            "file": "lib\\controls\\googleCharts\\chartBase.js",
            "line": 35,
            "description": "Base class for charting classes. Application must include the following line in the header section for charts to work.\ngoogle.load('visualization', '1.0', {'packages':['corechart']});",
            "extends": "div",
            "is_constructor": 1,
            "params": [
                {
                    "name": "shared",
                    "description": "used to pass protected methods down to derived classes",
                    "type": "Object"
                }
            ]
        },
        "columnChart": {
            "name": "columnChart",
            "shortname": "columnChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "submodule": "googleCharts",
            "namespace": "",
            "file": "lib\\controls\\googleCharts\\columnChart.js",
            "line": 32,
            "description": "A columnChart",
            "extends": "chartBase",
            "is_constructor": 1,
            "params": [
                {
                    "name": "shared",
                    "description": "used to pass protected methods down to derived classes",
                    "type": "Object"
                }
            ]
        },
        "lineChart": {
            "name": "lineChart",
            "shortname": "lineChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "submodule": "googleCharts",
            "namespace": "",
            "file": "lib\\controls\\googleCharts\\lineChart.js",
            "line": 32,
            "description": "A lineChart",
            "extends": "chartBase",
            "is_constructor": 1,
            "params": [
                {
                    "name": "shared",
                    "description": "used to pass protected methods down to derived classes",
                    "type": "Object"
                }
            ]
        },
        "pieChart": {
            "name": "pieChart",
            "shortname": "pieChart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "submodule": "googleCharts",
            "namespace": "",
            "file": "lib\\controls\\googleCharts\\pieChart.js",
            "line": 32,
            "description": "A pieChart",
            "extends": "chartBase",
            "is_constructor": 1,
            "params": [
                {
                    "name": "shared",
                    "description": "used to pass protected methods down to derived classes",
                    "type": "Object"
                }
            ]
        },
        "hybridMap": {
            "name": "hybridMap",
            "shortname": "hybridMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "submodule": "googleMaps",
            "namespace": "",
            "file": "lib\\controls\\googleMaps\\hybridMap.js",
            "line": 32,
            "description": "A hybridMap.",
            "extends": "mapBase",
            "is_constructor": 1,
            "params": [
                {
                    "name": "shared",
                    "description": "used to pass protected methods down to derived classes",
                    "type": "Object"
                }
            ]
        },
        "mapBase": {
            "name": "mapBase",
            "shortname": "mapBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "submodule": "googleMaps",
            "namespace": "",
            "file": "lib\\controls\\googleMaps\\mapBase.js",
            "line": 33,
            "description": "Base class for map classes. Application must include reference to google maps api with appropriate API key for this to work\n<script type=\"text/javascript\" src=\"https://maps.googleapis.com/maps/api/js?key=API_KEY&sensor=true\"></script>",
            "extends": "div",
            "is_constructor": 1,
            "params": [
                {
                    "name": "shared",
                    "description": "used to pass protected methods down to derived classes",
                    "type": "Object"
                }
            ]
        },
        "roadMap": {
            "name": "roadMap",
            "shortname": "roadMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "submodule": "googleMaps",
            "namespace": "",
            "file": "lib\\controls\\googleMaps\\roadMap.js",
            "line": 32,
            "description": "A roadMap.",
            "extends": "mapBase",
            "is_constructor": 1,
            "params": [
                {
                    "name": "shared",
                    "description": "used to pass protected methods down to derived classes",
                    "type": "Object"
                }
            ]
        },
        "satelliteMap": {
            "name": "satelliteMap",
            "shortname": "satelliteMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "submodule": "googleMaps",
            "namespace": "",
            "file": "lib\\controls\\googleMaps\\satelliteMap.js",
            "line": 32,
            "description": "A satelliteMap.",
            "extends": "mapBase",
            "is_constructor": 1,
            "params": [
                {
                    "name": "shared",
                    "description": "used to pass protected methods down to derived classes",
                    "type": "Object"
                }
            ]
        },
        "terrainMap": {
            "name": "terrainMap",
            "shortname": "terrainMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "submodule": "googleMaps",
            "namespace": "",
            "file": "lib\\controls\\googleMaps\\terrainMap.js",
            "line": 32,
            "description": "A terrainMap.",
            "extends": "mapBase",
            "is_constructor": 1,
            "params": [
                {
                    "name": "shared",
                    "description": "used to pass protected methods down to derived classes",
                    "type": "Object"
                }
            ]
        },
        "dialogButtonRow": {
            "name": "dialogButtonRow",
            "shortname": "dialogButtonRow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "namespace": "",
            "file": "lib\\controls\\dialogButtonRow.js",
            "line": 32,
            "description": "Container for dialog buttons",
            "extends": "div",
            "is_constructor": 1
        },
        "dialogSkeleton": {
            "name": "dialogSkeleton",
            "shortname": "dialogSkeleton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "namespace": "",
            "file": "lib\\controls\\dialogSkeleton.js",
            "line": 43,
            "description": "Skeleton class to implement basic dialog content management and movement logic.",
            "extends": "popup",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "dialog parent. used to determine z-index of the dialog.",
                    "type": "Element"
                },
                {
                    "name": "contentRowFactory",
                    "description": "optional. factory class to create different content containers must provide createContentRow() function. If not provided, a simple div with overflow auto is used as content row container.",
                    "type": "Object"
                }
            ]
        },
        "dialogTitleRow": {
            "name": "dialogTitleRow",
            "shortname": "dialogTitleRow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "namespace": "",
            "file": "lib\\controls\\dialogTitleRow.js",
            "line": 32,
            "description": "Implementation of a dialog title row including corner cancel button.",
            "extends": "div",
            "is_constructor": 1
        },
        "enumMouseButton": {
            "name": "enumMouseButton",
            "shortname": "enumMouseButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "namespace": "",
            "file": "lib\\controls\\enumMouseButton.js",
            "line": 22,
            "description": "A simple class to enumerate mouse buttons for identification. Not all browsers return button code the same way. Our library have overcome this difference among browsers we have tested."
        },
        "fileBrowseButton": {
            "name": "fileBrowseButton",
            "shortname": "fileBrowseButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "namespace": "",
            "file": "lib\\controls\\fileBrowseButton.js",
            "line": 45,
            "description": "A stylable file upload button.",
            "extends": "valueContainer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "acceptTypes",
                    "description": "",
                    "type": "Array of acceptType"
                },
                {
                    "name": "fileInputButton",
                    "description": "@optional. a fileInput element.",
                    "type": "FileInput"
                }
            ]
        },
        "modalDialog": {
            "name": "modalDialog",
            "shortname": "modalDialog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "namespace": "",
            "file": "lib\\controls\\modalDialog.js",
            "line": 39,
            "description": "a modal dialog",
            "extends": "dialogSkeleton",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "Used to calculated z-index of the dialog",
                    "type": "Element"
                },
                {
                    "name": "contentRowFactory",
                    "description": "optional. factory class to create different content containers must provide createContentRow() function. If not provided, a simple div with overflow auto is used as content row container.",
                    "type": "Object"
                }
            ]
        },
        "popup": {
            "name": "popup",
            "shortname": "popup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "namespace": "",
            "file": "lib\\controls\\popup.js",
            "line": 36,
            "description": "A general purpose popup",
            "extends": "div",
            "is_constructor": 1
        },
        "popupMoveHandler": {
            "name": "popupMoveHandler",
            "shortname": "popupMoveHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "namespace": "",
            "file": "lib\\controls\\popupMoveHandler.js",
            "line": 33,
            "description": "Mouse handler that moves popup around.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "moveRangePanel",
                    "description": "the range within which the popup moves",
                    "type": "Element"
                },
                {
                    "name": "popupElement",
                    "description": "the popup element to move",
                    "type": "Popup"
                }
            ]
        },
        "valueContainer": {
            "name": "valueContainer",
            "shortname": "valueContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "namespace": "",
            "file": "lib\\controls\\valueContainer.js",
            "line": 32,
            "description": "Base class for value container controls",
            "extends": "div",
            "is_constructor": 1
        },
        "windowOverlay": {
            "name": "windowOverlay",
            "shortname": "windowOverlay",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "controls",
            "namespace": "",
            "file": "lib\\controls\\windowOverlay.js",
            "line": 33,
            "description": "An overlay over entire window to support modal dialog",
            "extends": "div",
            "is_constructor": 1
        },
        "a": {
            "name": "a",
            "shortname": "a",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\a.js",
            "line": 30,
            "description": "Represents an anchor element created by document.createElement(\"a\")",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "area": {
            "name": "area",
            "shortname": "area",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\area.js",
            "line": 22,
            "description": "Represents an area element created by document.createElement(\"area\"). This is used as part of a map. Use setAttributeValue function to set attributes, e.g. shape, coords, href, alt, for the underlying area element.",
            "extends": "element"
        },
        "article": {
            "name": "article",
            "shortname": "article",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\article.js",
            "line": 30,
            "description": "Represents an article element created by document.createElement(\"article\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "@optional. not used for any logic but to identify the object for debugging purpose.",
                    "type": "String"
                }
            ]
        },
        "audio": {
            "name": "audio",
            "shortname": "audio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\audio.js",
            "line": 32,
            "description": "Represents an audio element created by document.createElement(\"audio\"). Use setAttributeValue function to set attributes, e.g. autoplay, controls, loop, muted, preload, src, for the underlying audio element.",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "width in pixels",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "height in pixels",
                    "type": "Float"
                }
            ]
        },
        "bdo": {
            "name": "bdo",
            "shortname": "bdo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\bdo.js",
            "line": 30,
            "description": "Represents a bdo element created by document.createElement(\"bdo\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "@optional. not used for any logic but to identify the object for debugging purpose.",
                    "type": "String"
                }
            ]
        },
        "body": {
            "name": "body",
            "shortname": "body",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\body.js",
            "line": 35,
            "description": "Represent document body element. Singleton within the same page. Constructor calls will return the same object.",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "br": {
            "name": "br",
            "shortname": "br",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\br.js",
            "line": 22,
            "description": "Represents an br element created by document.createElement(\"br\")",
            "extends": "element"
        },
        "button": {
            "name": "button",
            "shortname": "button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\button.js",
            "line": 31,
            "description": "Represents a button element created by document.createElement(\"button\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "content",
                    "description": "optional, content of the button",
                    "type": "Element or string"
                }
            ]
        },
        "canvas": {
            "name": "canvas",
            "shortname": "canvas",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\canvas.js",
            "line": 31,
            "description": "Represents a canvas element created by document.createElement(\"canvas\"). Use getHtmlElement to access the underlying element and its programming interface functions.",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "width in pixels",
                    "type": "Float"
                },
                {
                    "name": "heigth",
                    "description": "height in pixels",
                    "type": "Float"
                }
            ]
        },
        "caption": {
            "name": "caption",
            "shortname": "caption",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\caption.js",
            "line": 31,
            "description": "Represents a caption element created by document.createElement(\"caption\"). Caption doesn't support setAttributeValue, setFormId, and setClasses. The functions exist but doesn't do anything.",
            "extends": "element",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "caption text",
                    "type": "String"
                }
            ]
        },
        "checkBox": {
            "name": "checkBox",
            "shortname": "checkBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\checkBox.js",
            "line": 30,
            "description": "Represents an input element with type 'checkbox' created by document.createElement(\"input\")",
            "extends": "inputElement",
            "is_constructor": 1
        },
        "containerElement": {
            "name": "containerElement",
            "shortname": "containerElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\containerElement.js",
            "line": 34,
            "description": "Base class for all container DOM wrapper classes",
            "extends": "element",
            "is_constructor": 1,
            "params": [
                {
                    "name": "htmlElement",
                    "description": "an object created by document.createElement() function",
                    "type": "Object"
                },
                {
                    "name": "elementName",
                    "description": "not used for any logic but used for debugging purpose to identify the object",
                    "type": "String"
                }
            ],
            "optional": 1
        },
        "datetimeInput": {
            "name": "datetimeInput",
            "shortname": "datetimeInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\datetimeInput.js",
            "line": 30,
            "description": "Represents an input element created by document.createElement(\"input\"). Provide the capability to convert value from text to Date.",
            "extends": "inputElement",
            "is_constructor": 1
        },
        "decentMouseEvent": {
            "name": "decentMouseEvent",
            "shortname": "decentMouseEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 22,
            "description": "Represents a mouse event consistent across browsers. This object is passed to mouse event handlers (sender, event) as the last parameter."
        },
        "div": {
            "name": "div",
            "shortname": "div",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\div.js",
            "line": 30,
            "description": "Represents a div element created by document.createElement(\"div\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "@optional. not used for any logic but to identify the object for debugging purpose.",
                    "type": "String"
                }
            ]
        },
        "divButton": {
            "name": "divButton",
            "shortname": "divButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\divButton.js",
            "line": 11,
            "description": "Represents a div element created by document.createElement(\"div\"). Used to simulate a button behavior where mousedown event will notify interested observers. Useful when button styling doesn't fully satisfy need.",
            "extends": "div",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "@optional. not used for any logic but to identify the object for debugging purpose.",
                    "type": "String"
                }
            ]
        },
        "documentElement": {
            "name": "documentElement",
            "shortname": "documentElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\documentElement.js",
            "line": 104,
            "description": "Represents \"document.documentElement\" as an element. Singleton within a page. Constructor calls will return the same object.",
            "extends": "element",
            "is_constructor": 1
        },
        "link": {
            "name": "link",
            "shortname": "link",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\documentElement.js",
            "line": 35,
            "description": "Represents a link in document head"
        },
        "element": {
            "name": "element",
            "shortname": "element",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\element.js",
            "line": 63,
            "description": "Base class for all DOM wrapper classes. By default all elements will have zIndex 20.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "htmlElement",
                    "description": "an object created by document.createElement() function",
                    "type": "Object"
                },
                {
                    "name": "elementName",
                    "description": "not used for any logic but used for debugging purpose to identify the object",
                    "type": "String"
                }
            ],
            "optional": 1
        },
        "embed": {
            "name": "embed",
            "shortname": "embed",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\embed.js",
            "line": 30,
            "description": "Represents an embed element created by document.createElement(\"embed\"). Use setAttributeValue function to set attributes, e.g. src, type, width, height, for the underlying embed element.",
            "extends": "element",
            "is_constructor": 1
        },
        "fieldset": {
            "name": "fieldset",
            "shortname": "fieldset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\fieldset.js",
            "line": 34,
            "description": "Represents a fieldset element created by document.createElement(\"fieldset\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "labelContent",
                    "description": "content for the fieldset label",
                    "type": "Element"
                }
            ]
        },
        "figCaption": {
            "name": "figCaption",
            "shortname": "figCaption",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\figCaption.js",
            "line": 31,
            "description": "Represents a figCaption element created by document.createElement(\"figcaption\"). figCaption doesn't support setAttributeValue, setFormId, and setClasses. The functions exist but doesn't do anything.",
            "extends": "element",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "figCaption text",
                    "type": "String"
                }
            ]
        },
        "figure": {
            "name": "figure",
            "shortname": "figure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\figure.js",
            "line": 30,
            "description": "Represents a figure element created by document.createElement(\"figure\").",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "fileInput": {
            "name": "fileInput",
            "shortname": "fileInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\fileInput.js",
            "line": 32,
            "description": "Represents an input element with type 'file' created by document.createElement(\"input\")",
            "extends": "inputElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "acceptType",
                    "description": ", @optional",
                    "type": "Array of acceptType"
                }
            ]
        },
        "floatInput": {
            "name": "floatInput",
            "shortname": "floatInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\floatInput.js",
            "line": 29,
            "description": "Input that only allows float value in the edit box.",
            "extends": "numericInput",
            "is_constructor": 1,
            "params": [
                {
                    "name": "initialValue",
                    "description": "optional. initial value of the input.",
                    "type": "Float"
                }
            ]
        },
        "footer": {
            "name": "footer",
            "shortname": "footer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\footer.js",
            "line": 30,
            "description": "Represents a footer element created by document.createElement(\"footer\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "@optional. not used for any logic but to identify the object for debugging purpose.",
                    "type": "String"
                }
            ]
        },
        "form": {
            "name": "form",
            "shortname": "form",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\form.js",
            "line": 32,
            "description": "Represents a form element created by document.createElement(\"form\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "action",
                    "description": "action attribute value",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "method attribute value",
                    "type": "String"
                },
                {
                    "name": "encType",
                    "description": "enctype attribute value",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "id attribute value",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "target attribute value",
                    "type": "String"
                }
            ]
        },
        "h1": {
            "name": "h1",
            "shortname": "h1",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\h1.js",
            "line": 22,
            "description": "Represents a h1 element created by document.createElement(\"h1\")",
            "extends": "containerElement"
        },
        "h2": {
            "name": "h2",
            "shortname": "h2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\h2.js",
            "line": 22,
            "description": "Represents a h2 element created by document.createElement(\"h2\")",
            "extends": "containerElement"
        },
        "h3": {
            "name": "h3",
            "shortname": "h3",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\h3.js",
            "line": 22,
            "description": "Represents a h3 element created by document.createElement(\"h3\")",
            "extends": "containerElement"
        },
        "h4": {
            "name": "h4",
            "shortname": "h4",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\h4.js",
            "line": 22,
            "description": "Represents a h4 element created by document.createElement(\"h4\")",
            "extends": "containerElement"
        },
        "h5": {
            "name": "h5",
            "shortname": "h5",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\h5.js",
            "line": 22,
            "description": "Represents a h5 element created by document.createElement(\"h5\")",
            "extends": "containerElement"
        },
        "h6": {
            "name": "h6",
            "shortname": "h6",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\h6.js",
            "line": 22,
            "description": "Represents a h6 element created by document.createElement(\"h6\")",
            "extends": "containerElement"
        },
        "header": {
            "name": "header",
            "shortname": "header",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\header.js",
            "line": 30,
            "description": "Represents a header element created by document.createElement(\"header\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "@optional. not used for any logic but to identify the object for debugging purpose.",
                    "type": "String"
                }
            ]
        },
        "hr": {
            "name": "hr",
            "shortname": "hr",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\hr.js",
            "line": 22,
            "description": "Represents a hr element created by document.createElement(\"hr\")",
            "extends": "element"
        },
        "iframe": {
            "name": "iframe",
            "shortname": "iframe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\iframe.js",
            "line": 32,
            "description": "Represents an iframe element created by document.createElement(\"iframe\")",
            "extends": "element",
            "is_constructor": 1
        },
        "img": {
            "name": "img",
            "shortname": "img",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\img.js",
            "line": 31,
            "description": "Represents an img element created by document.createElement(\"img\")",
            "extends": "element",
            "is_constructor": 1,
            "params": [
                {
                    "name": "src",
                    "description": "src attribute value",
                    "type": "String"
                },
                {
                    "name": "alt",
                    "description": "alt attribute value",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "width in pixels",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "height in pixels",
                    "type": "Float"
                }
            ]
        },
        "inputElement": {
            "name": "inputElement",
            "shortname": "inputElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\inputElement.js",
            "line": 32,
            "description": "Base class for all input wrapper classes",
            "extends": "valueElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "htmlElement",
                    "description": "an object created by document.createElement() function",
                    "type": "Object"
                },
                {
                    "name": "elementName",
                    "description": "not used for any logic but used for debugging purpose to identify the object",
                    "type": "String"
                }
            ],
            "optional": 1
        },
        "intInput": {
            "name": "intInput",
            "shortname": "intInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\intInput.js",
            "line": 30,
            "description": "Input that only allows integer value in the edit box.",
            "extends": "numericInput",
            "is_constructor": 1,
            "params": [
                {
                    "name": "initialValue",
                    "description": "optional. initial value of the input.",
                    "type": "Integer"
                }
            ]
        },
        "keygen": {
            "name": "keygen",
            "shortname": "keygen",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\keygen.js",
            "line": 22,
            "description": "Represents a keygen element created by document.createElement(\"keygen\")",
            "extends": "element"
        },
        "label": {
            "name": "label",
            "shortname": "label",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\label.js",
            "line": 31,
            "description": "Represents a label element created by document.createElement(\"label\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "forId",
                    "description": "for attribute value",
                    "type": "String"
                }
            ]
        },
        "legend": {
            "name": "legend",
            "shortname": "legend",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\legend.js",
            "line": 30,
            "description": "Represents a legend element created by document.createElement(\"legend\")",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "li": {
            "name": "li",
            "shortname": "li",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\li.js",
            "line": 31,
            "description": "Represents a list item element created by document.createElement(\"li\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "content",
                    "description": "content of the item",
                    "type": "String or element"
                },
                {
                    "name": "data",
                    "description": "@optional. data attached to the item.",
                    "type": "Any"
                }
            ]
        },
        "map": {
            "name": "map",
            "shortname": "map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\map.js",
            "line": 30,
            "description": "Represents a map element created by document.createElement(\"map\"). Use setName function to set required attribute \"name\".",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "numericInput": {
            "name": "numericInput",
            "shortname": "numericInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\numericInput.js",
            "line": 30,
            "description": "Base class for float and integer input",
            "extends": "inputElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "verifier",
                    "description": "must support function verifyValue()",
                    "type": "Object"
                },
                {
                    "name": "className",
                    "description": "not used for any logic but for debugging purpose to identify the object.",
                    "type": "String"
                }
            ]
        },
        "objectElement": {
            "name": "objectElement",
            "shortname": "objectElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\objectElement.js",
            "line": 30,
            "description": "Represents an object element created by document.createElement(\"object\"). Use setName function to set required attribute \"name\".",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "ol": {
            "name": "ol",
            "shortname": "ol",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\ol.js",
            "line": 31,
            "description": "Represents an ordered list element created by document.createElement(\"ol\")",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "optGroup": {
            "name": "optGroup",
            "shortname": "optGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\optGroup.js",
            "line": 30,
            "description": "Represents an option group element created by document.createElement(\"optgroup\")",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "option": {
            "name": "option",
            "shortname": "option",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\option.js",
            "line": 30,
            "description": "Represents an option element created by document.createElement(\"option\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "itemContent",
                    "description": "content of the item",
                    "type": "String or element"
                },
                {
                    "name": "value",
                    "description": "optional. value of the option",
                    "type": "Any"
                }
            ]
        },
        "p": {
            "name": "p",
            "shortname": "p",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\p.js",
            "line": 31,
            "description": "Represents a p element created by document.createElement(\"p\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "content",
                    "description": "optional. content of the paragraph",
                    "type": "String"
                }
            ]
        },
        "param": {
            "name": "param",
            "shortname": "param",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\param.js",
            "line": 30,
            "description": "Represents a param element created by document.createElement(\"param\")",
            "extends": "element",
            "is_constructor": 1
        },
        "position": {
            "name": "position",
            "shortname": "position",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\position.js",
            "line": 28,
            "description": "A simple structure to represent a position",
            "is_constructor": 1,
            "params": [
                {
                    "name": "left",
                    "description": "left value in pixels",
                    "type": "Float"
                },
                {
                    "name": "top",
                    "description": "top value in pixels",
                    "type": "Float"
                }
            ]
        },
        "radioButton": {
            "name": "radioButton",
            "shortname": "radioButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\radioButton.js",
            "line": 31,
            "description": "Represents an input element with type 'radio' created by document.createElement(\"input\")",
            "extends": "inputElement",
            "is_constructor": 1
        },
        "scrollPanel": {
            "name": "scrollPanel",
            "shortname": "scrollPanel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\scrollPanel.js",
            "line": 31,
            "description": "Just a div with overflow set to auto.",
            "extends": "div",
            "is_constructor": 1
        },
        "select": {
            "name": "select",
            "shortname": "select",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\select.js",
            "line": 31,
            "description": "Represents a select element created by document.createElement(\"select\")",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "size": {
            "name": "size",
            "shortname": "size",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\size.js",
            "line": 28,
            "description": "A simple structure to represent a size",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "width value in pixels",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "height value in pixels",
                    "type": "Float"
                }
            ]
        },
        "source": {
            "name": "source",
            "shortname": "source",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\source.js",
            "line": 31,
            "description": "Represents an source element created by document.createElement(\"source\"). Use setAttributeValue function to set attributes, e.g. src, type, media, for the underlying source element.",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "src",
                    "description": "value for src attribute",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "value for type attribute",
                    "type": "String"
                },
                {
                    "name": "media",
                    "description": "value for media attribute",
                    "type": "String"
                }
            ]
        },
        "span": {
            "name": "span",
            "shortname": "span",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\span.js",
            "line": 31,
            "description": "Represents a span element created by document.createElement(\"span\")",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "spanText": {
            "name": "spanText",
            "shortname": "spanText",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\spanText.js",
            "line": 35,
            "description": "Represents a span element that only contains a text node",
            "extends": "valueElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "content of the inner text node",
                    "type": "String"
                }
            ]
        },
        "svg": {
            "name": "svg",
            "shortname": "svg",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\svg.js",
            "line": 31,
            "description": "Represents a svg element created by document.createElement(\"svg\"). Use getHtmlElement() to access the underlying programming interface.",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "width in pixels",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "height in pixels",
                    "type": "Float"
                }
            ]
        },
        "table": {
            "name": "table",
            "shortname": "table",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\table.js",
            "line": 37,
            "description": "Represents a table element created by document.createElement(\"table\")",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "tbody": {
            "name": "tbody",
            "shortname": "tbody",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\tbody.js",
            "line": 31,
            "description": "Represents a table body element created by document.createElement(\"tbody\")",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "td": {
            "name": "td",
            "shortname": "td",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\td.js",
            "line": 31,
            "description": "Represents a table cell element created by document.createElement(\"td\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "cellTemplate",
                    "description": "cell content",
                    "type": "Element"
                }
            ]
        },
        "textArea": {
            "name": "textArea",
            "shortname": "textArea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\textArea.js",
            "line": 31,
            "description": "Represents an anchor element created by document.createElement(\"textArea\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "initialContent",
                    "description": "html content of the text area",
                    "type": "String"
                }
            ]
        },
        "textBlock": {
            "name": "textBlock",
            "shortname": "textBlock",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\textBlock.js",
            "line": 35,
            "description": "Represents a div element that only contains a text node",
            "extends": "div",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "text node content",
                    "type": "String"
                }
            ]
        },
        "textInput": {
            "name": "textInput",
            "shortname": "textInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\textInput.js",
            "line": 31,
            "description": "Represents an input element with default type created by document.createElement(\"input\")",
            "extends": "inputElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "initialValue",
                    "description": "optional. initial content",
                    "type": "String"
                }
            ]
        },
        "textNode": {
            "name": "textNode",
            "shortname": "textNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\textNode.js",
            "line": 30,
            "description": "Represents an text node element created by document.createTextNode()",
            "extends": "element",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "initial content of the text node",
                    "type": "String"
                }
            ]
        },
        "tfoot": {
            "name": "tfoot",
            "shortname": "tfoot",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\tfoot.js",
            "line": 32,
            "description": "Represents a table footer element created by document.createElement(\"tfoot\")",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "th": {
            "name": "th",
            "shortname": "th",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\th.js",
            "line": 31,
            "description": "Represents a table header cell element created by document.createElement(\"th\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "headerTemplate",
                    "description": "header cell content",
                    "type": "Element"
                }
            ]
        },
        "thead": {
            "name": "thead",
            "shortname": "thead",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\thead.js",
            "line": 32,
            "description": "Represents a table header row element created by document.createElement(\"thead\")",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "touchEvent": {
            "name": "touchEvent",
            "shortname": "touchEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\touchEvent.js",
            "line": 31,
            "description": "Represents a touch event consistent across browsers and devices. This object is passed to touch event handlers (sender, event) as the last parameter.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "rawEvent",
                    "description": "",
                    "type": "TouchEvent"
                }
            ]
        },
        "tr": {
            "name": "tr",
            "shortname": "tr",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\tr.js",
            "line": 32,
            "description": "Represents a table row element created by document.createElement(\"tr\")",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "track": {
            "name": "track",
            "shortname": "track",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\track.js",
            "line": 30,
            "description": "Represents a track element created by document.createElement(\"track\")",
            "extends": "element",
            "is_constructor": 1
        },
        "ul": {
            "name": "ul",
            "shortname": "ul",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\ul.js",
            "line": 31,
            "description": "Represents an unordered list element created by document.createElement(\"ul\")",
            "extends": "containerElement",
            "is_constructor": 1
        },
        "valueElement": {
            "name": "valueElement",
            "shortname": "valueElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\valueElement.js",
            "line": 34,
            "description": "Represents a DOM element whose value can be changed by user",
            "extends": "element",
            "is_constructor": 1,
            "params": [
                {
                    "name": "htmlElement",
                    "description": "an object created by document.createElement() function",
                    "type": "Object"
                },
                {
                    "name": "elementName",
                    "description": "not used for any logic but used for debugging purpose to identify the object",
                    "type": "String"
                }
            ],
            "optional": 1
        },
        "video": {
            "name": "video",
            "shortname": "video",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\video.js",
            "line": 32,
            "description": "Represents a video element created by document.createElement(\"video\")",
            "extends": "containerElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "width in pixels",
                    "type": "Float"
                },
                {
                    "name": "height",
                    "description": "height in pixels",
                    "type": "Float"
                }
            ]
        },
        "windowElement": {
            "name": "windowElement",
            "shortname": "windowElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "elements",
            "namespace": "",
            "file": "lib\\elements\\windowElement.js",
            "line": 36,
            "description": "Represents \"window\" as an element. Singleton within a page. Constructor calls will return the same object.",
            "extends": "element",
            "is_constructor": 1
        },
        "acceptType": {
            "name": "acceptType",
            "shortname": "acceptType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\acceptType.js",
            "line": 31,
            "description": "Represents an accept type combination. For example, \"image/*\" is represented as acceptType('image', '*');",
            "is_constructor": 1,
            "params": [
                {
                    "name": "contentType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "subtype",
                    "description": "",
                    "type": "String"
                }
            ]
        },
        "bindButtonCommand": {
            "name": "bindButtonCommand",
            "shortname": "bindButtonCommand",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\bindButtonCommand.js",
            "line": 31,
            "description": "Bind a button's enabled state with a command's canExecute function. When button is clicked and command's canExecute function returns true, command body function will be invoked",
            "is_constructor": 1,
            "params": [
                {
                    "name": "button",
                    "description": "an object constructed by button or divButton constructor",
                    "type": "Object"
                },
                {
                    "name": "command",
                    "description": "an object constructed by command constructor",
                    "type": "Object"
                }
            ]
        },
        "bindFileProperty": {
            "name": "bindFileProperty",
            "shortname": "bindFileProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\bindFileProperty.js",
            "line": 34,
            "description": "Data binding between a DOM file input element and a named property of a model",
            "is_constructor": 1,
            "params": [
                {
                    "name": "viewElement",
                    "description": "an object returned by one of the view element constructor. It may optionally implement onError(string), onDismissError() function to respond to invalid values.",
                    "type": "Object"
                },
                {
                    "name": "model",
                    "description": "an object of class derived from filePropertyModel",
                    "type": "ModelBase"
                }
            ]
        },
        "bindProperty": {
            "name": "bindProperty",
            "shortname": "bindProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\bindProperty.js",
            "line": 32,
            "description": "Data binding between a DOM element and a named property of a model",
            "is_constructor": 1,
            "params": [
                {
                    "name": "viewElement",
                    "description": "an object returned by one of the view element constructor. It may optionally implement onError(string), onDismissError() function to respond to invalid values.",
                    "type": "Object"
                },
                {
                    "name": "model",
                    "description": "an object of class derived from modelBase",
                    "type": "ModelBase"
                },
                {
                    "name": "propertyName",
                    "description": "name of a property in the model",
                    "type": "String"
                }
            ]
        },
        "collectionModelBase": {
            "name": "collectionModelBase",
            "shortname": "collectionModelBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 33,
            "description": "A general purpose base class for collection of models to wrap around a raw data array. Derived classes may define calculated properties by overriding getPropertyValue function.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "arrayDto",
                    "description": "normally generated by JSON.parse when data transportation object is an array",
                    "type": "Array of object"
                },
                {
                    "name": "modelFactory",
                    "description": "Used to provide customized factory to create child data model or specialized data model for array of objects. This object must implement all public functions defined in modelFactory class.",
                    "type": "Object"
                }
            ]
        },
        "command": {
            "name": "command",
            "shortname": "command",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\command.js",
            "line": 35,
            "description": "Represents a command as in Command pattern.",
            "extends": "observable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "execute",
                    "description": "body function of the command",
                    "type": "Function"
                },
                {
                    "name": "canExecute",
                    "description": "function that controls the enabled state of the command. command body function will not be executed when this function returns false",
                    "type": "Function"
                }
            ]
        },
        "customEvent": {
            "name": "customEvent",
            "shortname": "customEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\customEvent.js",
            "line": 30,
            "description": "Manages a set of subscribers and sends notification to all subscribers when event is raised",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name of the event. Not used for any logic. Only used for debugging purpose to identify the event object.",
                    "type": "String"
                }
            ]
        },
        "fileHandlingModelFactory": {
            "name": "fileHandlingModelFactory",
            "shortname": "fileHandlingModelFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\fileHandlingModelFactory.js",
            "line": 41,
            "description": "Default factory class for creating file management models. Due to assumptions made in this class, it should be used more as an example than as a concrete implementation. Users of the library are encouraged to remove this class from the library and create implementation that fits their own need.",
            "is_constructor": 1
        },
        "filePropertyModel": {
            "name": "filePropertyModel",
            "shortname": "filePropertyModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\filePropertyModel.js",
            "line": 31,
            "description": "A specialized model class for handling file property in a model. Due to assumptions made in this class, it should be used more as an example than as a concrete implementation. Users of the library are encouraged to remove this class from the library and create implementation that fits their own need.",
            "extends": "modelBase",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dto",
                    "description": "JSON definition of a file property. @optional If not provided, the following object is used. \n{ \"__type\": \"FileProperty\",\n\"Value\": { \"__type\": \"FileValue\",\n\"FileName\": \"\",\n\"CurrentContentType\": \"\",\n\"FileId\": \"\",\n\"FileKey\": \"\"\n},\n\"AcceptableTypes\":[{}]\n};",
                    "type": "Object"
                },
                {
                    "name": "fileModelFactory",
                    "description": "Instance of fileHandlingModelFactory or its derived class.",
                    "type": "Object"
                }
            ]
        },
        "fileTypeModel": {
            "name": "fileTypeModel",
            "shortname": "fileTypeModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\fileTypeModel.js",
            "line": 32,
            "description": "A specialized model class for handling file type. Due to assumptions made in this class, it should be used more as an example than as a concrete implementation. Users of the library are encouraged to remove this from the library and create implementation that fits their own need.",
            "extends": "modelBase",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dto",
                    "description": "an object used to construct modelBase. If not provided, the following object is used.\n{ \n\"__type\": \"FileContentType\",\n\"ContentType\": \"image\",\n\"Subtype\": \"*\"\n};",
                    "type": "Object"
                }
            ]
        },
        "fileValueModel": {
            "name": "fileValueModel",
            "shortname": "fileValueModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\fileValueModel.js",
            "line": 34,
            "description": "A specialized model class for handling file value.Due to assumptions made in this class, it should be used more as an example than as a concrete implementation. Users of the library are encouraged to remove this from the library and create implementation that fits their own need.",
            "extends": "modelBase",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dto",
                    "description": "an object used to construct modelBase. @optional. If not provided, the following object will be used.\n{ \"__type\": \"FileValue\",\n\"FileName\": \"\",\n\"CurrentContentType\": \"\",\n\"FileId\": \"\"\n\"FileKey\": a random string\n};",
                    "type": "Object"
                }
            ]
        },
        "guid": {
            "name": "guid",
            "shortname": "guid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\guid.js",
            "line": 35,
            "description": "A simulator for GUID generator. Used to generate client side random id.",
            "is_constructor": 1
        },
        "modelBase": {
            "name": "modelBase",
            "shortname": "modelBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\modelBase.js",
            "line": 30,
            "description": "A general purpose base class for model to wrap around a raw data transportation object so that basic functions can be provided to support binding. Derived classes may override functions to vary behaviour for data validation or provide calculated property values.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "jsonDto",
                    "description": "normally generated by JSON.parse",
                    "type": "Object"
                },
                {
                    "name": "modelFactory",
                    "description": "Used to provide customized factory to create child data model or specialized data model for array of objects. This object must implement all public functions defined in modelFactory class.",
                    "type": "Object"
                }
            ]
        },
        "modelFactory": {
            "name": "modelFactory",
            "shortname": "modelFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\modelFactory.js",
            "line": 32,
            "description": "Default model factory class.",
            "is_constructor": 1
        },
        "multiFilePropertyModel": {
            "name": "multiFilePropertyModel",
            "shortname": "multiFilePropertyModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\multiFilePropertyModel.js",
            "line": 32,
            "description": "A specialized model class for handling a property that may contain multiple files. Due to assumptions made in this class, it should be used more as an example than as a concrete implementation. Users of the library are encouraged to remove this from the library and create implementation that fits their own need.",
            "extends": "modelBase",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dto",
                    "description": "a data object used to construct modelBase. If not provided, the following object is used.\n{\n\"__type\": \"MultiFileProperty\",\n\"AcceptableTypes\": [],\n\"Files\": []\n} \nand a default accept file type of \"image/*\" is assumed.",
                    "type": "Object"
                },
                {
                    "name": "fileModelFactory",
                    "description": "an object that implements all public functions in fileHandlingModelFactory",
                    "type": "Object"
                }
            ]
        },
        "observable": {
            "name": "observable",
            "shortname": "observable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\observable.js",
            "line": 31,
            "description": "An observable is the host of a single value",
            "is_constructor": 1,
            "params": [
                {
                    "name": "className",
                    "description": "not used for any logic. only used in debugging to identify the object",
                    "type": "String"
                }
            ]
        },
        "observableCollection": {
            "name": "observableCollection",
            "shortname": "observableCollection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "observe",
            "namespace": "",
            "file": "lib\\observe\\observableCollection.js",
            "line": 31,
            "description": "Collection of objects whose change can be observed by subscription",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "lib\\comm\\asyncGetCall.js",
            "line": 124,
            "description": "Add additional parameter for the ajax call",
            "itemtype": "method",
            "name": "addParameter",
            "params": [
                {
                    "name": "callParam",
                    "description": "constructed by asyncCallParam",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "asyncGetCall",
            "module": "comm"
        },
        {
            "file": "lib\\comm\\asyncGetCall.js",
            "line": 137,
            "description": "Invoke the ajax call with the parameters provided",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "urlRoot",
                    "description": "passed in serviceProxy's urlRoot",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "asyncGetCall",
            "module": "comm"
        },
        {
            "file": "lib\\comm\\asyncPostCall.js",
            "line": 131,
            "description": "Invoke the ajax call with the parameters provided",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "urlRoot",
                    "description": "passed in serviceProxy's urlRoot",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "asyncPostCall",
            "module": "comm"
        },
        {
            "file": "lib\\comm\\formPost.js",
            "line": 60,
            "description": "Execute form post using the urlRoot provided",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "urlRoot",
                    "description": "url path root for form submit operation",
                    "type": "String"
                }
            ],
            "class": "formPost",
            "module": "comm"
        },
        {
            "file": "lib\\comm\\restCallBase.js",
            "line": 92,
            "description": "Get call method. Must return one of GET/POST/PUT/PATCH/DELETE.\nDerived class is expected to override this function to return the correct call method.",
            "itemtype": "method",
            "name": "getMethod",
            "return": {
                "description": "string"
            },
            "class": "restCallBase",
            "module": "comm"
        },
        {
            "file": "lib\\comm\\restCallBase.js",
            "line": 102,
            "description": "Get data associated with the call. Derived class is expected to override this function to provide the data in the correct format as specified in getDataMimeType function.",
            "itemtype": "method",
            "name": "getData",
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "restCallBase",
            "module": "comm"
        },
        {
            "file": "lib\\comm\\restCallBase.js",
            "line": 111,
            "description": "Whether JSON input/output should be used. Derived class is expected to override this function if JSON is not used. Default is true. \n\nWhen this function returns true, MIME type of the request will be set to \"application/json\" and Accept header of the request will include \"application/json\". Callback functions will be invoked after JSON.parse is called on responseText. If parsing failed, failureCallback will be invoked. If parsing succeeded, successCallback will be invoked with parsed data (instead of text data).\n\nWhen this function returns false, Callback functions will be invoked with responseText as data.",
            "itemtype": "method",
            "name": "useJsonIo",
            "return": {
                "description": "boolean"
            },
            "class": "restCallBase",
            "module": "comm"
        },
        {
            "file": "lib\\comm\\restCallBase.js",
            "line": 124,
            "description": "Get MIME type of the data for request header. When outer.useJsonIo returns true, 'application/json' will be returned. If JSON is not used, derived class is expected to override this function to provide the correct MIME type.",
            "itemtype": "method",
            "name": "getDataMimeType",
            "return": {
                "description": "string"
            },
            "class": "restCallBase",
            "module": "comm"
        },
        {
            "file": "lib\\comm\\restCallBase.js",
            "line": 137,
            "description": "Get the string to set \"Content-Type\" header. When this function returns null, \"Content-Type\" header will not be set.",
            "itemtype": "method",
            "name": "getContentType",
            "return": {
                "description": "string"
            },
            "class": "restCallBase",
            "module": "comm"
        },
        {
            "file": "lib\\comm\\restCallBase.js",
            "line": 146,
            "description": "Get string for setting \"Accept\" in request. When outer.useJsonIo returns true, 'application/json' will be returned. If JSON is not used, derived class is expected to override this function to provide the correct string for setting \"Accept\" in request header.",
            "class": "restCallBase",
            "module": "comm"
        },
        {
            "file": "lib\\comm\\restCallBase.js",
            "line": 218,
            "description": "Add additional parameter for the rest call",
            "itemtype": "method",
            "name": "addParameter",
            "params": [
                {
                    "name": "callParam",
                    "description": "constructed by asyncCallParam",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "restCallBase",
            "module": "comm"
        },
        {
            "file": "lib\\comm\\restCallBase.js",
            "line": 231,
            "description": "Invoke the rest call with the parameters provided",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "urlRoot",
                    "description": "passed in serviceProxy's urlRoot",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "restCallBase",
            "module": "comm"
        },
        {
            "file": "lib\\comm\\serviceProxy.js",
            "line": 45,
            "description": "Execute an asynchronous ajax call",
            "itemtype": "method",
            "name": "executeAsyncCall",
            "params": [
                {
                    "name": "asyncCall",
                    "description": "asyncGetCall or asyncPostCall",
                    "type": "Object"
                }
            ],
            "class": "serviceProxy",
            "module": "comm"
        },
        {
            "file": "lib\\comm\\serviceProxy.js",
            "line": 55,
            "description": "Execute an asynchronous form submit call",
            "itemtype": "method",
            "name": "executeFormPost",
            "params": [
                {
                    "name": "formDirectPost",
                    "description": "an object created by formPost",
                    "type": "Object"
                }
            ],
            "class": "serviceProxy",
            "module": "comm"
        },
        {
            "file": "lib\\controls\\D3Charts\\d3BubbleChart.js",
            "line": 50,
            "description": "Draw a bubble chart with the data provided",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "data",
                    "description": "a tree structure for bubble charting.",
                    "type": "Object"
                }
            ],
            "class": "d3BubbleChart",
            "module": "controls",
            "submodule": "D3Chart"
        },
        {
            "file": "lib\\controls\\D3Charts\\d3Charting.js",
            "line": 46,
            "description": "Accessing the SVG element for the chart. For d3 charting programming API please refer to d3 documentation.",
            "itemtype": "method",
            "name": "getSvg",
            "return": {
                "description": "HTML svg element"
            },
            "class": "d3Charting",
            "module": "controls",
            "submodule": "D3Chart"
        },
        {
            "file": "lib\\controls\\googleCharts\\chartBase.js",
            "line": 43,
            "description": "Initializing data for charting.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "initializeData",
            "params": [
                {
                    "name": "data",
                    "description": "used for google.visualization.arrayToDataTable function",
                    "type": "Array"
                }
            ],
            "class": "chartBase",
            "module": "controls",
            "submodule": "googleCharts"
        },
        {
            "file": "lib\\controls\\googleCharts\\chartBase.js",
            "line": 53,
            "description": "Create the chart. Derived classes are expected to override this function to create the corresponding chart. Default is a BarChart",
            "itemtype": "method",
            "name": "createChart",
            "access": "protected",
            "tagname": "",
            "class": "chartBase",
            "module": "controls",
            "submodule": "googleCharts"
        },
        {
            "file": "lib\\controls\\googleCharts\\chartBase.js",
            "line": 64,
            "description": "Draw chart with the data and option provided",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "data",
                    "description": "used for google.visualization.arrayToDataTable function",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "options for the chart. Check Google charting reference for details. https://google-developers.appspot.com/chart/",
                    "type": "Object"
                }
            ],
            "class": "chartBase",
            "module": "controls",
            "submodule": "googleCharts"
        },
        {
            "file": "lib\\controls\\googleCharts\\chartBase.js",
            "line": 79,
            "description": "Returns the data table created by google.visualization.arrayToDataTable. Used for testing purpose.",
            "itemtype": "method",
            "name": "getDataTable",
            "return": {
                "description": "data table",
                "type": "DataTable"
            },
            "class": "chartBase",
            "module": "controls",
            "submodule": "googleCharts"
        },
        {
            "file": "lib\\controls\\googleCharts\\chartBase.js",
            "line": 88,
            "description": "Returns the chart. For ChartWrapper programming interface functions, please check google chart documentation: https://google-developers.appspot.com/chart/",
            "itemtype": "method",
            "name": "getChart",
            "return": {
                "description": "chart",
                "type": "ChartWrapper"
            },
            "class": "chartBase",
            "module": "controls",
            "submodule": "googleCharts"
        },
        {
            "file": "lib\\controls\\googleCharts\\pieChart.js",
            "line": 57,
            "description": "Draw pie chart with the data specified.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "columnDefs",
                    "description": ", e.g. [\n{ type: 'string', label: 'Topping'},\n{ type: 'number', label: 'Slices'}\n\t];",
                    "type": "Array of column specifications"
                },
                {
                    "name": "rows",
                    "description": ", e.g. [\n          ['Mushrooms', 3],\n          ['Onions', 1],\n          ['Olives', 1],\n          ['Zucchini', 1],\n          ['Pepperoni', 2]\n        ]",
                    "type": "Array of records"
                }
            ],
            "class": "pieChart",
            "module": "controls",
            "submodule": "googleCharts"
        },
        {
            "file": "lib\\controls\\googleMaps\\mapBase.js",
            "line": 41,
            "description": "Map options. Check google map documentations on map options: https://developers.google.com/maps/documentation/javascript/",
            "access": "protected",
            "tagname": "",
            "itemtype": "attribute",
            "name": "inner.mapOptions",
            "class": "mapBase",
            "module": "controls",
            "submodule": "googleMaps"
        },
        {
            "file": "lib\\controls\\googleMaps\\mapBase.js",
            "line": 52,
            "description": "Display the map with specified options",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "mapBase",
            "module": "controls",
            "submodule": "googleMaps"
        },
        {
            "file": "lib\\controls\\googleMaps\\mapBase.js",
            "line": 70,
            "description": "Get options used to draw the map",
            "itemtype": "method",
            "name": "getOptions",
            "return": {
                "description": "options",
                "type": "Object"
            },
            "class": "mapBase",
            "module": "controls",
            "submodule": "googleMaps"
        },
        {
            "file": "lib\\controls\\googleMaps\\mapBase.js",
            "line": 79,
            "description": "Get current map. For programming interface functions of Map, please check google documentation: https://developers.google.com/maps/documentation/javascript/basics",
            "itemtype": "method",
            "name": "getMap",
            "return": {
                "description": "object",
                "type": "google.maps.Map"
            },
            "class": "mapBase",
            "module": "controls",
            "submodule": "googleMaps"
        },
        {
            "file": "lib\\controls\\dialogButtonRow.js",
            "line": 49,
            "description": "Add default OK and Cancel buttons to the container",
            "itemtype": "method",
            "name": "addDefaultButtons",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "dialogButtonRow",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogButtonRow.js",
            "line": 60,
            "description": "Access the OK button. Useful for command binding",
            "itemtype": "method",
            "name": "getOkButton",
            "return": {
                "description": "ok button",
                "type": "Button"
            },
            "class": "dialogButtonRow",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogButtonRow.js",
            "line": 69,
            "description": "Access the Cancel button. Useful for command binding",
            "itemtype": "method",
            "name": "getCancelButton",
            "return": {
                "description": "cancel button",
                "type": "Button"
            },
            "class": "dialogButtonRow",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogSkeleton.js",
            "line": 99,
            "description": "Accessing drag handle of the dialog. Drag handle is the element that user click and drag to move the dialog around. Normally this should be the title of the dialog",
            "itemtype": "method",
            "name": "dragHandle",
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "dialogSkeleton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogSkeleton.js",
            "line": 114,
            "description": "Set title row content.",
            "itemtype": "method",
            "name": "setTitleContent",
            "params": [
                {
                    "name": "title",
                    "description": "title content",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "dialogSkeleton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogSkeleton.js",
            "line": 126,
            "description": "Accessing the title content passed in by setTitleContent.",
            "itemtype": "method",
            "name": "getTitleContent",
            "return": {
                "description": "title content",
                "type": "Element"
            },
            "class": "dialogSkeleton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogSkeleton.js",
            "line": 135,
            "description": "Get title content container.",
            "itemtype": "method",
            "name": "getTitleRow",
            "return": {
                "description": "title content container",
                "type": "Element"
            },
            "class": "dialogSkeleton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogSkeleton.js",
            "line": 144,
            "description": "Get content container created by the content row factory.",
            "itemtype": "method",
            "name": "getContentContainer",
            "return": {
                "description": "content container",
                "type": "Element"
            },
            "class": "dialogSkeleton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogSkeleton.js",
            "line": 153,
            "description": "Set button row content, replace the default buttons.",
            "itemtype": "method",
            "name": "setButtonRowContent",
            "params": [
                {
                    "name": "buttonRowContent",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "dialogSkeleton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogSkeleton.js",
            "line": 165,
            "description": "Get button row content.",
            "itemtype": "method",
            "name": "getButtonRowContent",
            "return": {
                "description": "buttonRowContent",
                "type": "Element"
            },
            "class": "dialogSkeleton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogSkeleton.js",
            "line": 174,
            "description": "Get button row container.",
            "itemtype": "method",
            "name": "getButtonRow",
            "return": {
                "description": "button row container",
                "type": "Element"
            },
            "class": "dialogSkeleton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogSkeleton.js",
            "line": 183,
            "description": "Get dialog's background overlay",
            "itemtype": "method",
            "name": "getBackground",
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "dialogSkeleton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogSkeleton.js",
            "line": 208,
            "description": "Show dialog at center of window. Dialog elements including background overlay will be added to body.",
            "itemtype": "method",
            "name": "show",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "dialogSkeleton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogSkeleton.js",
            "line": 225,
            "description": "Override. Close dialog and remove elements from body. Elements are not disposed until dispose is called.",
            "itemtype": "method",
            "name": "close",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "dialogSkeleton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogTitleRow.js",
            "line": 47,
            "description": "Access the corner cancel button. Useful for command binding",
            "itemtype": "method",
            "name": "getCornerButton",
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "dialogTitleRow",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogTitleRow.js",
            "line": 56,
            "description": "Overwrite default corner button content",
            "itemtype": "method",
            "name": "setCornerButtonContent",
            "params": [
                {
                    "name": "content",
                    "description": "corner control content",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "dialogTitleRow",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogTitleRow.js",
            "line": 68,
            "description": "Get container of the title",
            "itemtype": "method",
            "name": "getTitle",
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "dialogTitleRow",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogTitleRow.js",
            "line": 77,
            "description": "Get content of the title",
            "itemtype": "method",
            "name": "getTitleContent",
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "dialogTitleRow",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\dialogTitleRow.js",
            "line": 86,
            "description": "Overwrite content of title",
            "itemtype": "method",
            "name": "setTitleContent",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "dialogTitleRow",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\enumMouseButton.js",
            "line": 30,
            "description": "Left button, integer. meant to be constant",
            "itemtype": "attribute",
            "name": "left",
            "class": "enumMouseButton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\enumMouseButton.js",
            "line": 35,
            "description": "Middle button, integer. meant to be constant",
            "itemtype": "attribute",
            "name": "middle",
            "class": "enumMouseButton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\enumMouseButton.js",
            "line": 40,
            "description": "Right button, integer. meant to be constant",
            "itemtype": "attribute",
            "name": "right",
            "class": "enumMouseButton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\fileBrowseButton.js",
            "line": 99,
            "description": "Get content container of the button where more content can be added.",
            "itemtype": "method",
            "name": "getContentContainer",
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "fileBrowseButton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\fileBrowseButton.js",
            "line": 120,
            "description": "Get the name part of the file path",
            "itemtype": "method",
            "name": "getFileName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "fileBrowseButton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\fileBrowseButton.js",
            "line": 134,
            "description": "Whether current file is an image file.",
            "itemtype": "method",
            "name": "isImageFile",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "fileBrowseButton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\fileBrowseButton.js",
            "line": 189,
            "description": "Set acceptable file types of the file input",
            "itemtype": "method",
            "name": "setAcceptableTypes",
            "params": [
                {
                    "name": "acceptableTypes",
                    "description": "",
                    "type": "Array of acceptType"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "fileBrowseButton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\fileBrowseButton.js",
            "line": 200,
            "description": "Can accept content type and subtype",
            "itemtype": "method",
            "name": "canAccept",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "fileBrowseButton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\fileBrowseButton.js",
            "line": 209,
            "description": "Set current file type",
            "itemtype": "method",
            "name": "setFileType",
            "params": [
                {
                    "name": "fileType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "fileBrowseButton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\fileBrowseButton.js",
            "line": 220,
            "description": "Get current file type set",
            "itemtype": "method",
            "name": "getFileType",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "fileBrowseButton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\fileBrowseButton.js",
            "line": 229,
            "description": "Create file icon based on current file. For image files, an image icon will be created. For other file types, a simple div with additional class in the format \"fileIcon-icon-<file type>\" is created.",
            "itemtype": "method",
            "name": "createFileContentIcon",
            "return": {
                "description": "icon created",
                "type": "Element"
            },
            "class": "fileBrowseButton",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\modalDialog.js",
            "line": 84,
            "description": "Show dialog",
            "itemtype": "method",
            "name": "show",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "modalDialog",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\modalDialog.js",
            "line": 113,
            "description": "Close the dialog",
            "itemtype": "method",
            "name": "close",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "modalDialog",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\modalDialog.js",
            "line": 140,
            "description": "Override. Set title row content.",
            "itemtype": "method",
            "name": "setTitleContent",
            "params": [
                {
                    "name": "title",
                    "description": "title content",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "modalDialog",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\modalDialog.js",
            "line": 151,
            "description": "Command to control enabled state of OK button. Override to provide customized behaviour.",
            "itemtype": "attribute",
            "name": "okCommand",
            "type": "Command",
            "class": "modalDialog",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\modalDialog.js",
            "line": 156,
            "description": "Command to control enabled state of Cancel button. Override to provide customized behaviour.",
            "itemtype": "attribute",
            "name": "cancelCommand",
            "type": "Command",
            "class": "modalDialog",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\popup.js",
            "line": 48,
            "description": "Calculate popup position to centre current content in the centre of the window",
            "itemtype": "method",
            "name": "centerPopup",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "popup",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\popup.js",
            "line": 68,
            "description": "Create outer container for the popup. Can be overridden in derived class to control class and behaviour of the popup",
            "itemtype": "method",
            "name": "createOuterContainer",
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "popup",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\popup.js",
            "line": 92,
            "description": "Get current outer container",
            "itemtype": "method",
            "name": "getOuterContainer",
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "popup",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\popup.js",
            "line": 101,
            "description": "Set content z-index value",
            "itemtype": "method",
            "name": "setContentZIndex",
            "params": [
                {
                    "name": "zIndex",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "popup",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\popup.js",
            "line": 113,
            "description": "Show current content in the centre of the window. content will be added to body",
            "itemtype": "method",
            "name": "showAtCenter",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "popup",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\popup.js",
            "line": 130,
            "description": "Show current content at specified absolute position. Content will be added to body",
            "itemtype": "method",
            "name": "showAt",
            "params": [
                {
                    "name": "left",
                    "description": "left value",
                    "type": "Float"
                },
                {
                    "name": "top",
                    "description": "top value",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "popup",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\popup.js",
            "line": 148,
            "description": "Close popup. Content will be removed from document body",
            "itemtype": "method",
            "name": "close",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "popup",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\popup.js",
            "line": 164,
            "description": "Get current popup position.",
            "itemtype": "method",
            "name": "getPopupPosition",
            "return": {
                "description": "popup position",
                "type": "Position"
            },
            "class": "popup",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\popup.js",
            "line": 173,
            "description": "Change popup position",
            "itemtype": "method",
            "name": "moveToPosition",
            "params": [
                {
                    "name": "left",
                    "description": "left value",
                    "type": "Float"
                },
                {
                    "name": "top",
                    "description": "top value",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "popup",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\popup.js",
            "line": 185,
            "description": "Get top value of current popup position",
            "itemtype": "method",
            "name": "contentTop",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "popup",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\popup.js",
            "line": 194,
            "description": "Get left value of current popup position",
            "itemtype": "method",
            "name": "contentLeft",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "popup",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\popup.js",
            "line": 203,
            "description": "Whether popup is currently visible.\tpopup is only visible after show or showAt function call.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "popup",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\popup.js",
            "line": 214,
            "description": "Attach a visibility status change observer",
            "itemtype": "method",
            "name": "subscribeToStatusChange",
            "params": [
                {
                    "name": "callback",
                    "description": "when visibility changes this function will be called with (listener, sender, isVisible)",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "popup",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\popup.js",
            "line": 225,
            "description": "Detach a visibility status change observer",
            "itemtype": "method",
            "name": "unsubscribeStatusChange",
            "params": [
                {
                    "name": "callback",
                    "description": "when visibility changes this function will be called with (listener, sender, isVisible)",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "popup",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\valueContainer.js",
            "line": 44,
            "description": "Attach a value change event listener.",
            "itemtype": "method",
            "name": "subscribeToValueChange",
            "params": [
                {
                    "name": "callback",
                    "description": "This function will be called with (sender, value) when value of this element is changed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "valueContainer",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\valueContainer.js",
            "line": 51,
            "description": "Detach a value change event listener",
            "itemtype": "method",
            "name": "unsubscribeValueChange",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "valueContainer",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\valueContainer.js",
            "line": 58,
            "description": "Notify all value change listeners with current value.",
            "itemtype": "method",
            "name": "raiseValueChanged",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "valueContainer",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\valueContainer.js",
            "line": 64,
            "description": "Returns current value this element contains",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "value",
                "type": "Any"
            },
            "class": "valueContainer",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\valueContainer.js",
            "line": 70,
            "description": "Set value of this element",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "value for the element",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "valueContainer",
            "module": "controls"
        },
        {
            "file": "lib\\controls\\windowOverlay.js",
            "line": 56,
            "description": "Set color of the overlay using inline style.backgroundColor. Better to achieve this by CSS using class 'backgroundOverlay'.",
            "itemtype": "method",
            "name": "setColor",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "windowOverlay",
            "module": "controls"
        },
        {
            "file": "lib\\elements\\a.js",
            "line": 57,
            "description": "Attach click event listener. When user clicks on the anchor, callback function will be called with (sender, clickEvent).",
            "itemtype": "method",
            "name": "subscribeToClick",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "a",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\a.js",
            "line": 68,
            "description": "Detach click event listener",
            "itemtype": "method",
            "name": "unsubscribeClick",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "a",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\a.js",
            "line": 79,
            "description": "Set href attribute value.",
            "itemtype": "method",
            "name": "setHref",
            "params": [
                {
                    "name": "href",
                    "description": "value for href attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "a",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\a.js",
            "line": 90,
            "description": "Set rel attribute value.",
            "itemtype": "method",
            "name": "setRel",
            "params": [
                {
                    "name": "rel",
                    "description": "value for rel attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "a",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\a.js",
            "line": 101,
            "description": "Set target attribute value.",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "target",
                    "description": "value for target attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "a",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\audio.js",
            "line": 52,
            "description": "Add source to audio",
            "itemtype": "method",
            "name": "addSource",
            "params": [
                {
                    "name": "src",
                    "description": "src attribute value of the source",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "type attribute vaule of the source",
                    "type": "String"
                },
                {
                    "name": "media",
                    "description": "media attribute value of the source.",
                    "type": "String"
                }
            ],
            "class": "audio",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\button.js",
            "line": 63,
            "description": "Attach click event listener",
            "itemtype": "method",
            "name": "subscribeToClick",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function. When click event is raised, this function will be called with (sender, clickEvent)",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "button",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\button.js",
            "line": 74,
            "description": "Detach click event listener",
            "itemtype": "method",
            "name": "unsubscribeClick",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "button",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\button.js",
            "line": 85,
            "description": "Set text content of button",
            "itemtype": "method",
            "name": "setButtonText",
            "params": [
                {
                    "name": "newText",
                    "description": "text content",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "button",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\button.js",
            "line": 101,
            "description": "Clear current content and replace with content provided",
            "itemtype": "method",
            "name": "setButtonContent",
            "params": [
                {
                    "name": "content",
                    "description": "new content, must be an object derived from element",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "button",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\button.js",
            "line": 114,
            "description": "Whether this button is enabled",
            "itemtype": "method",
            "name": "isEnabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "button",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\button.js",
            "line": 124,
            "description": "Set enabled state",
            "itemtype": "method",
            "name": "setIsEnabled",
            "params": [
                {
                    "name": "isEnabled",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "button",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\button.js",
            "line": 142,
            "description": "Shortcute function to disable the button",
            "itemtype": "method",
            "name": "disable",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "button",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\button.js",
            "line": 154,
            "description": "Shortcute function to enable the button",
            "itemtype": "method",
            "name": "enable",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "button",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\caption.js",
            "line": 41,
            "description": "Set text of the caption",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "newText",
                    "description": "new text content",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "caption",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\caption.js",
            "line": 55,
            "description": "Get current text of the caption",
            "itemtype": "method",
            "name": "getText",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "caption",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 48,
            "description": "Override. Disable/enable selection on this element and all elements contained in this element.",
            "itemtype": "method",
            "name": "toggleSelectable",
            "params": [
                {
                    "name": "isSelectable",
                    "description": "@optional",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 66,
            "description": "Return all elements contained.",
            "itemtype": "method",
            "name": "childElements",
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 74,
            "description": "Get contained element by index. Child elements are indexed in the sequence added.",
            "itemtype": "method",
            "name": "getChildElement",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 83,
            "description": "Override. Whether this element has the htmlElement passed in as descendant.",
            "itemtype": "method",
            "name": "containsHtmlElement",
            "params": [
                {
                    "name": "htmlElement",
                    "description": "an object created by document.createElement() function. Only descendants added through add function will be detected.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 102,
            "description": "Get all the file input elements in descendents",
            "itemtype": "method",
            "name": "getFileInputElements",
            "return": {
                "description": "collection of fileInput elements",
                "type": "Array"
            },
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 135,
            "description": "Add a child element. ContentChange event listeners will be notified with { action: 'add', element: element added}. If this element is attached to DOM, child element added will receive onAttachedToDom call.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "viewElement",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "current element to support fluent style coding"
            },
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 153,
            "description": "Insert a child element in the child list at specified index.",
            "itemtype": "method",
            "name": "insertAt",
            "params": [
                {
                    "name": "index",
                    "description": "the index at which the child element is supposed to end up with in the child list. If index = <number of children>, the child element is appended at the end. For index value less than 0 or greater than <number of children>, no operation is performed",
                    "type": "Int"
                },
                {
                    "name": "elem",
                    "description": "element to be inserted.",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "current element to support fluent style coding"
            },
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 180,
            "description": "Remove a child at specified index.",
            "itemtype": "method",
            "name": "removeAt",
            "params": [
                {
                    "name": "index",
                    "description": "the index of the child element to remove. If no child is found at the specified position, no operation is performed",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "The child element removed. This element is not disposed. Caller is responsible of disposing the removed element when no longer used."
            },
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 195,
            "description": "Remove a child element. ContentChange event listeners will be notified with { action: 'remove', element: the element removed }. If this element is attached to DOM, child element removed will receive onDetachFromDom call. The element removed will NOT be disposed by this call.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "viewElement",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 219,
            "description": "Remove a child at specified index and dispose the element.",
            "itemtype": "method",
            "name": "deleteAt",
            "params": [
                {
                    "name": "index",
                    "description": "the index of the child element to remove. If no child is found at the specified position, no operation is performed",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 232,
            "description": "Remove a child element and dispose it. ContentChange event listeners will be notified with { action: 'remove', element: the element removed }. If this element is attached to DOM, child element removed will receive onDetachFromDom call. The element removed will be disposed by this call.",
            "itemtype": "method",
            "name": "deleteElement",
            "params": [
                {
                    "name": "viewElement",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 245,
            "description": "Returns number of child elements.",
            "itemtype": "method",
            "name": "numberOfChildren",
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 253,
            "description": "Retrieve a child element by data attached. Data can be attached to an element by calling attachData method on element.",
            "itemtype": "method",
            "name": "getChildByData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 266,
            "description": "Raise content clear event. Content change listeners attached (by subscribeToContentChange function) will be notified with two parameters (sender, changeEvent). sender will have the value of this element and change event will be an object { action: 'clear', element: <this element> }.",
            "itemtype": "method",
            "name": "raiseClear",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 276,
            "description": "Remove all child elements. ContentChange event handlers will be notified with { action:'clear', element: this }. No calling of dispose on any child element.",
            "itemtype": "method",
            "name": "removeAll",
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 291,
            "description": "Remove all child elements. ContentChange event handlers will be notified with { action:'clear', element: this }. Will call dispose function on every child element.",
            "itemtype": "method",
            "name": "clear",
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 307,
            "description": "Attach a ContentChanged event listener. The listener will be notified when a child element is added or removed OR this element clears its children.",
            "itemtype": "method",
            "name": "subscribeToContentChange",
            "params": [
                {
                    "name": "callback",
                    "description": "function to call when content of this element is changed.",
                    "type": "Function"
                }
            ],
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 317,
            "description": "Detach a ContentChanged event listener.",
            "itemtype": "method",
            "name": "unsubscribeContentChange",
            "params": [
                {
                    "name": "callback",
                    "description": "function to call when content of this element is changed.",
                    "type": "Function"
                }
            ],
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 333,
            "description": "Override. Returns inner html as a string. Inner html will not include tag of this element.",
            "itemtype": "method",
            "name": "getInnerHtml",
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 346,
            "description": "Override. Set inline style zIndex for this element and all children elements.",
            "itemtype": "method",
            "name": "setZIndex",
            "params": [
                {
                    "name": "zIndex",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 361,
            "description": "Override. Attached to DOM notification function. Will notify all children elements with onAttachedToDom call.",
            "itemtype": "method",
            "name": "onAttachedToDom",
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 374,
            "description": "Override. Detached from DOM notification function. Will notify all children elements with onDetachedFromDom call.",
            "itemtype": "method",
            "name": "onDetachedFromDom",
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 405,
            "description": "Test whether an element is a direct child of this element",
            "itemtype": "method",
            "name": "hasElement",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 414,
            "description": "Forward all container functions to the ones on a descendant element.",
            "itemtype": "method",
            "name": "exposeChildAsContainer",
            "params": [
                {
                    "name": "childElement",
                    "description": "the descendant to which functions are forwarded",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 480,
            "description": "Expose container functions from this object. Container functions are: hasElement, childElements, getChildElement, add, remove, numberOfChildren, getChildByData, raiseClear, removeAll, clear,\nsubscribeToContentChange, unsubscribeContentChange, numberOfContentChangedListeners",
            "itemtype": "method",
            "name": "exposeSelfAsContainer",
            "return": {
                "description": "current object to support fluent style programming"
            },
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 538,
            "description": "Override. Dispose this element and all children. All children elements will be disposed.",
            "itemtype": "method",
            "name": "dispose",
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\containerElement.js",
            "line": 555,
            "description": "Override. Set form attribute value for all children elements.",
            "itemtype": "method",
            "name": "setFormId",
            "params": [
                {
                    "name": "formId",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "containerElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 33,
            "description": "Stop event bubbling.",
            "itemtype": "method",
            "name": "stopPropagation",
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 38,
            "description": "Prevent browser default action on the event. No effect in IE 8.",
            "itemtype": "method",
            "name": "preventDefault",
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 43,
            "description": "true if the alt key was down when the mouse event was fired.",
            "itemtype": "attribute",
            "name": "altKey. Read only.",
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 48,
            "description": "The button number that was pressed when the mouse event was fired. (0: left, 1: middle, 2: right)",
            "itemtype": "attribute",
            "name": "button. Read only.",
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 53,
            "description": "The X coordinate of the mouse pointer in local (DOM content) coordinates.",
            "itemtype": "attribute",
            "name": "clientX. Read only.",
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 58,
            "description": "The Y coordinate of the mouse pointer in local (DOM content) coordinates.",
            "itemtype": "attribute",
            "name": "clientY. Read only.",
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 63,
            "description": "true if the control key was down when the mouse event was fired.",
            "itemtype": "attribute",
            "name": "ctrlKey. Read only.",
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 68,
            "description": "true if the meta key was down when the mouse event was fired.",
            "itemtype": "attribute",
            "name": "metaKey. Read only.",
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 73,
            "description": "The element that triggered the event",
            "itemtype": "attribute",
            "name": "target. Read only.",
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 78,
            "description": "The element whose event listeners triggered the event",
            "itemtype": "attribute",
            "name": "currentTarget. Read only.",
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 83,
            "description": "The secondary target for the event, if there is one.",
            "itemtype": "attribute",
            "name": "relatedTarget. Read only.",
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 88,
            "description": "The X coordinate of the mouse pointer in global (screen) coordinates.",
            "itemtype": "attribute",
            "name": "screenX. Read only.",
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 93,
            "description": "The Y coordinate of the mouse pointer in global (screen) coordinates.",
            "itemtype": "attribute",
            "name": "screenY. Read only.",
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 98,
            "description": "true if the shift key was down when the mouse event was fired.",
            "itemtype": "attribute",
            "name": "shiftKey. Read only.",
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 152,
            "description": "Returns screen position of the mouse event as defined by (event.screenX, event.screenY);",
            "itemtype": "method",
            "name": "screenPosition",
            "return": {
                "description": "",
                "type": "Position"
            },
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 161,
            "description": "Returns client position of the mouse event as defined by (event.clientX, event.clientY);",
            "itemtype": "method",
            "name": "clientPosition",
            "return": {
                "description": "",
                "type": "Position"
            },
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\decentMouseEvent.js",
            "line": 170,
            "description": "Returns offset position of the mouse event as defined by (event.offsetX, event.offsetY);",
            "itemtype": "method",
            "name": "offsetPosition",
            "return": {
                "description": "",
                "type": "Position"
            },
            "class": "decentMouseEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\divButton.js",
            "line": 37,
            "description": "Attach a mousedown event listener",
            "itemtype": "method",
            "name": "subscribeToClick",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function. If enabled, this function will be called with (sender, mouseEvent) parameters when mouse down",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "divButton",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\divButton.js",
            "line": 48,
            "description": "detach a mousedown event listener",
            "itemtype": "method",
            "name": "unsubscribeClick",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "divButton",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\divButton.js",
            "line": 59,
            "description": "Simulate button disable. Will remove \"disabled\" class from the div.",
            "itemtype": "method",
            "name": "enable",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "divButton",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\divButton.js",
            "line": 72,
            "description": "Simulate button enable. Will add \"disabled\" class to the div.",
            "itemtype": "method",
            "name": "disable",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "divButton",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\documentElement.js",
            "line": 46,
            "description": "Get value of an attribute",
            "itemtype": "method",
            "name": "getAttributeValue",
            "params": [
                {
                    "name": "attrName",
                    "description": "name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "link",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\documentElement.js",
            "line": 56,
            "description": "Set value of an attribute",
            "itemtype": "method",
            "name": "setAttributeValue",
            "params": [
                {
                    "name": "attrName",
                    "description": "name of the attribute",
                    "type": "String"
                },
                {
                    "name": "attrValue",
                    "description": "value of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "link",
                "type": "Object"
            },
            "class": "link",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\documentElement.js",
            "line": 166,
            "description": "Get an object representing <link> in document head",
            "itemtype": "method",
            "name": "getLinkById",
            "params": [
                {
                    "name": "id",
                    "description": "id of the link",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Link"
            },
            "class": "documentElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 382,
            "description": "Returns the underlying HTML element",
            "itemtype": "method",
            "name": "getHtmlElement",
            "return": {
                "description": "htmlElement",
                "type": "Object"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 393,
            "description": "Whether this element has the htmlElement passed in as descendant.",
            "itemtype": "method",
            "name": "containsHtmlElement",
            "params": [
                {
                    "name": "htmlElement",
                    "description": "an object created by document.createElement() function. Only descendants added through add function (in containerElement subclass) will be detected.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 405,
            "description": "Set id attribute value",
            "itemtype": "method",
            "name": "setId",
            "params": [
                {
                    "name": "idValue",
                    "description": "value of the id attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 417,
            "description": "Returns id attribute value",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "id",
                "type": "String"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 426,
            "description": "Set form attribute of the element. Used for adding input to a form. The same form id will be applied to all descendants.",
            "itemtype": "method",
            "name": "setFormId",
            "params": [
                {
                    "name": "formId",
                    "description": "id of the form",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 438,
            "description": "Get form attribute value.",
            "itemtype": "method",
            "name": "getFormId",
            "return": {
                "description": "formid",
                "type": "String"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 448,
            "description": "Disable/enable selection on this element",
            "itemtype": "method",
            "name": "toggleSelectable",
            "params": [
                {
                    "name": "isSelectable",
                    "description": "@optional",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 472,
            "description": "Whether this element is selectable",
            "itemtype": "method",
            "name": "isSelectable",
            "return": {
                "description": "boolean"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 481,
            "description": "Whether this element is editable. Equivalent to \"disabled\" is set or not.",
            "itemtype": "method",
            "name": "isEditable",
            "return": {
                "description": "boolean"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 497,
            "description": "Disable/enable editable state",
            "itemtype": "method",
            "name": "toggleEditable",
            "params": [
                {
                    "name": "isEditable",
                    "description": "@optional",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 514,
            "description": "Enable this element. Changes inline style \"disabled\" value",
            "itemtype": "method",
            "name": "enable",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 524,
            "description": "Disable this element. Changes inline style \"disabled\" value",
            "itemtype": "method",
            "name": "disable",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 536,
            "description": "Set value of \"name\" attribute",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "name",
                    "description": "value for name attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 547,
            "description": "Get value of \"name\" attribute",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "name attribute value",
                "type": "String"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 556,
            "description": "Set attribute value",
            "itemtype": "method",
            "name": "setAttributeValue",
            "params": [
                {
                    "name": "attributeName",
                    "description": "name of the attribute",
                    "type": "String"
                },
                {
                    "name": "attributeValue",
                    "description": "value of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 568,
            "description": "Get value of named attribute",
            "itemtype": "method",
            "name": "getAttributeValue",
            "params": [
                {
                    "name": "attributeName",
                    "description": "name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "attribute value",
                "type": "String"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 578,
            "description": "Remove definition of an attribute",
            "itemtype": "method",
            "name": "removeAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 595,
            "description": "Returns whether this element has definition of an attribute",
            "itemtype": "method",
            "name": "hasAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 608,
            "description": "Returns whether this element is visible. Returns false only when inline style.display is set to 'none'.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "boolean"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 617,
            "description": "Set style.display value when this element is set to visible. Default behaviour is to set it to \"inline\" but derived class may override to change behaviour, e.g. \"inline-block\". No parameter",
            "itemtype": "method",
            "name": "setVisibleDisplay",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 627,
            "description": "Toggle visibility of the element. Changes inline style.display (NOT style.visibility)",
            "itemtype": "method",
            "name": "toggleVisible",
            "params": [
                {
                    "name": "visible",
                    "description": "@optional",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 653,
            "description": "Whether this element is hidden. Returns true only when inline style.visibility is set to 'hidden'",
            "itemtype": "method",
            "name": "isHidden.",
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 661,
            "description": "Toggle element between different Hidden states. Changes inline style.visibility value",
            "itemtype": "method",
            "name": "toggleHidden",
            "params": [
                {
                    "name": "isHidden",
                    "description": "@optional",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 683,
            "description": "Set focus on this element.",
            "itemtype": "method",
            "name": "focus",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 696,
            "description": "Toggles HTML5 dragable attribute value",
            "itemtype": "method",
            "name": "toggleDragable",
            "params": [
                {
                    "name": "isDragable",
                    "description": "optional",
                    "type": "Bool"
                }
            ],
            "optional": 1,
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 714,
            "description": "Returns whether HTML5 dragable attribute is set to true",
            "itemtype": "method",
            "name": "isDragable",
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 723,
            "description": "Add a styling class to this element.",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "className",
                    "description": "name of the class",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 743,
            "description": "Remove a styling class from this element",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "className",
                    "description": "name of the class",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 763,
            "description": "Add more than one space delimited classes to this element",
            "itemtype": "method",
            "name": "addClasses",
            "params": [
                {
                    "name": "classes",
                    "description": "space delimited class names",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 778,
            "description": "Returns all styling classes for this element",
            "itemtype": "method",
            "name": "getClasses",
            "return": {
                "description": "class names",
                "type": "String"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 789,
            "description": "Returns whether this element has a styling class",
            "itemtype": "method",
            "name": "hasClass",
            "params": [
                {
                    "name": "className",
                    "description": "name of the class",
                    "type": "String"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 800,
            "description": "Returns getInnerHtml string of this element",
            "itemtype": "method",
            "name": "getInnerHtml",
            "return": {
                "description": "innerHtml content",
                "type": "String"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 809,
            "description": "Returns getOuterHtml string of this element",
            "itemtype": "method",
            "name": "getOuterHtml",
            "return": {
                "description": "outerHtml content",
                "type": "String"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 826,
            "description": "Returns tag name of this element. Tag names are all upper case",
            "itemtype": "method",
            "name": "getTagName",
            "return": {
                "description": "HTML tag",
                "type": "String"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 835,
            "description": "Attach a mouse handler to this element. The mouse handler may selectively have the following methods: onClick, onDoubleClick, onMouseDown, onMouseUp, onMouseMove, onMouseEnter, onMouseLeave, onMouseOut, onMouseWheel. Mouse event will be send to the handler as it happens if the corresponding mouse handling method presents in the mouse handler. Parameter passed into the mouse event handling function includes (sender, mouseEvent). Value of sender will be this element. When multiple handlers are attached to this element, they will be notified in the sequence of attaching.",
            "itemtype": "method",
            "name": "attachMouseHandler",
            "params": [
                {
                    "name": "mouseHandler",
                    "description": "the mouse handler object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 942,
            "description": "Detach a mouse handler from this element. Mouse handler will no longer receive any mouse event from this element",
            "itemtype": "method",
            "name": "detachMouseHandler",
            "params": [
                {
                    "name": "mouseHandler",
                    "description": "the mouse handler object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1067,
            "description": "Attach a touch handler to this element. The touch handler may selectively have the following methods: onTouchStart, onTouchEnter, onTouchMove, onTouchLeave, onTouchEnd, onTouchCancel. Touch event will be send to the handler as it happens if the corresponding touch handling method presents in the touch handler. Parameter passed into the touch event handling function includes (sender, touchEvent). Value of sender will be this element. When multiple handlers are attached to this element, they will be notified in the sequence of attaching.",
            "itemtype": "method",
            "name": "attachTouchHandler",
            "params": [
                {
                    "name": "touchHandler",
                    "description": "the touch handler object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1185,
            "description": "Detach a touch handler from this element. Touch handler will no longer receive any touch event from this element",
            "itemtype": "method",
            "name": "detachTouchHandler",
            "params": [
                {
                    "name": "touchHandler",
                    "description": "the touch handler object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1261,
            "description": "Attach a keyboard handler to this element. The keyboard handler may selectively have the following methods: onKeyDown, onKeyPress, onKeyUp. Keyboard event will be send to the handler as it happens if the corresponding keyboard handling method presents in the keyboard handler. Parameter passed into the keyboard event handling function includes (sender, keyboardEvent). Value of sender will be this element. When multiple handlers are attached to this element, they will be notified in the sequence of attaching.",
            "itemtype": "method",
            "name": "attachKeyboardHandler",
            "params": [
                {
                    "name": "keyboardHandler",
                    "description": "the keyboard handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1299,
            "description": "Detach a keyboard handler from this element",
            "itemtype": "method",
            "name": "detachKeyboardHandler",
            "params": [
                {
                    "name": "keyboardHandler",
                    "description": "the keyboard handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1342,
            "description": "Attach a HTML5 drag and drop event handler. The drag drop handler may selectively have the following methods: onDrag, onDragStart, onDragEnd, onDragEnter, onDragOver, onDragLeave, onDrop. Drag drop event will be send to the handler as it happens if the corresponding drag drop handling method presents in the drag drop handler. Parameter passed into the drag drop event handling function includes (sender, dragDropEvent). Value of sender will be this element. When multiple handlers are attached to this element, they will be notified in the sequence of attaching.",
            "itemtype": "method",
            "name": "attachDragDropHandler",
            "params": [
                {
                    "name": "dragDropHandler",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1415,
            "description": "Detach a drag drop handler from this element",
            "itemtype": "method",
            "name": "detachDragDropHandler",
            "params": [
                {
                    "name": "dragDropHandler",
                    "description": "the drag drop handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1501,
            "description": "Attached focus changed event handler to this element. The handler may selectively have the following methods: onFocus, onLostFocus. Parameters passed into the event handling function includes (sender, focusEvent). Value of the sender will be this element. When multiple handlers are attached to this element, they will be notified in the sequence of attaching.",
            "itemtype": "method",
            "name": "attachFocusHandler",
            "params": [
                {
                    "name": "focusHandler",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1530,
            "description": "Detach focus changed event handler from this element.",
            "itemtype": "method",
            "name": "detachFocusHandler",
            "params": [
                {
                    "name": "focusHandler",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1563,
            "description": "Attach a size change event listener to this element. Size change event is not implemented consistently in browsers except on window or document element (which is raised when user resize browser window). Depending on this event in general may lead to cross browser issues. Use this event as a last resort.",
            "itemtype": "method",
            "name": "subscribeToSizeChange",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function. When size change event is raised this function will be called with parameter (sender, sizeChangeEvent)",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1578,
            "description": "Detach a size change event listener",
            "itemtype": "method",
            "name": "unsubscribeSizeChange",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1593,
            "description": "Attach a visible size change event listener.\n\nVisible size changed event is raised when an element or its descendant has changed its visibility, i.e. style.display value changed, or a descendant has been added or removed from DOM",
            "itemtype": "method",
            "name": "subscribeToVisibleSizeChange",
            "params": [
                {
                    "name": "callback",
                    "description": "when Visible size change event happens, this function will be called with (sender, { source: element, isVisible: true/false });",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1606,
            "description": "Raise visible size change event. Mainly used by derived class to raise event",
            "itemtype": "method",
            "name": "raiseVisibleSizeChanged",
            "params": [
                {
                    "name": "srcEvent",
                    "description": "@optional, an object { source: element, isVisible: true/false }",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1618,
            "description": "Detach a visible size change event listener",
            "itemtype": "method",
            "name": "unsubscribeVisibleSizeChange",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1641,
            "description": "Attach a dispose event listener.",
            "itemtype": "method",
            "name": "subscribeToDispose",
            "params": [
                {
                    "name": "callback",
                    "description": "when this element is disposed, callback function will be invoked with a single argument of this element.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1652,
            "description": "Detach a dispose event listener",
            "itemtype": "method",
            "name": "unsubscribeDispose",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1664,
            "description": "Attach data of any type to this element. This is equivalent to \"tag\" property in WPF controls. Any data attached to a button or divButton element will be passed into canExecute or execute function for the command bound to the button or divButton. c.f. command class and bindButtonCommand class in observe folder",
            "itemtype": "method",
            "name": "attachData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1675,
            "description": "Retrieve data attached to this element by attachData function.",
            "itemtype": "method",
            "name": "retrieveData",
            "return": {
                "description": "data",
                "type": "Any"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1684,
            "description": "Returns scroll size as defined by HTML (scrollWidth, scrollHeight).\nAny size calculation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "getScrollSize",
            "return": {
                "description": "size",
                "type": "Object"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1694,
            "description": "Returns client size as defined by HTML (clientWidth, clientHeight). Any margin is not include in this size.\tClient size is not implement consistently across browser. IE and Safari will not include padding. Chrome and FireFox will.\nAny size calculation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "getClientSize",
            "return": {
                "description": "size",
                "type": "Object"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1704,
            "description": "Returns offsetSize as defined by HTML (offsetWidth, offsetHeight). Any margin is not included in this size. But it will include border and padding.\nAny size calculation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "getOffsetSize",
            "return": {
                "description": "size",
                "type": "Object"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1722,
            "description": "Returns the size of the element in pixels including margin, border, and padding.\nAny size calculation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "getOuterSize",
            "return": {
                "description": "size",
                "type": "Object"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1743,
            "description": "Returns the size of the element in pixels excluding any margin, border, and padding.\nAny size calculation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "getInnerSize",
            "return": {
                "description": "size",
                "type": "Object"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1767,
            "description": "Get height of the element excluding any padding, border, or margin.\nAny size calculation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "getInnerHeight",
            "return": {
                "description": "height value in pixel",
                "type": "Float"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1777,
            "description": "Set height of the element excluding any padding, border, or margin.\nAny size change operation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "setInnerHeight",
            "params": [
                {
                    "name": "height",
                    "description": "height in pixels",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1789,
            "description": "Set inline style.height to null. Used to remove previously set height value for inline style",
            "itemtype": "method",
            "name": "setHeightNull",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1880,
            "description": "Get width of the element in pixels excluding any padding, border, and margin.\nAny size calculation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "getInnerWidth",
            "type": "Float",
            "return": {
                "description": "width in pixels",
                "type": "Float"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1890,
            "description": "Set width of the element in pixels excluding any padding, border, and margin.\nAny size change operation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "setInnerWidth",
            "params": [
                {
                    "name": "widthValue",
                    "description": "width in pixels",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1902,
            "description": "Set inline style.width to null. Used to remove any previously set inline style.width value",
            "itemtype": "method",
            "name": "setWidthNull",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1912,
            "description": "Set inline style size (width, height). This size does NOT include any padding, border, or margin. It will be the value returned by getInnerSize.\nAny size calculation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "setInnerSize",
            "params": [
                {
                    "name": "newSize",
                    "description": "a structure created by size class: { left: leftValue, top: topValue}. all values are in pixels.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1946,
            "description": "Returns width of the element in pixel.\nAny size calculation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "getOuterWidth",
            "return": {
                "description": "width value in pixels",
                "type": "Float"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1956,
            "description": "Set width of the element INCLUDING padding, border, and margin\nAny size calculation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "setOuterWidth",
            "params": [
                {
                    "name": "widthValue",
                    "description": "width in pixels",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1968,
            "description": "Returns height of the element in pixels INCLUDING padding, border, and margin\nAny size calculation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "getOuterHeight",
            "return": {
                "description": "height value in pixels",
                "type": "String"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1978,
            "description": "Set height of the element INCLUDING padding, border, and margin.\nAny size calculation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "setOuterHeight",
            "params": [
                {
                    "name": "height",
                    "description": "height in pixels",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 1990,
            "description": "Set inline style size so that the outerSize of the element equals the parameter value. This size DOES include any padding, border, or margin. It will be the value returned by outerSize.\nAny size calculation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "setOuterSize",
            "params": [
                {
                    "name": "newSize",
                    "description": "a structure created by size class: { left: leftValue, top: topValue}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2012,
            "description": "Returns minWidth as defined by current computed style.\nAny size calculation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "getMinWidth",
            "return": {
                "description": "pixel value of minWidth",
                "type": "Float"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2027,
            "description": "Sets minWidth value for inline style.",
            "itemtype": "method",
            "name": "setMinWidth",
            "params": [
                {
                    "name": "minWidth",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2038,
            "description": "Returns maxWidth as defined by current computed style.\nAny size calculation is meaningful only when this element is attached to DOM.",
            "itemtype": "method",
            "name": "getMaxWidth",
            "return": {
                "description": "pixel value of minWidth",
                "type": "Float"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2053,
            "description": "Sets maxWidth value for inline style.",
            "itemtype": "method",
            "name": "setMaxWidth",
            "params": [
                {
                    "name": "maxWidth",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2064,
            "description": "Sets scroll top value in pixel",
            "itemtype": "method",
            "name": "setScrollTop",
            "params": [
                {
                    "name": "top",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2075,
            "description": "Sets scroll left value in pixel",
            "itemtype": "method",
            "name": "setScrollLeft",
            "params": [
                {
                    "name": "top",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2086,
            "description": "Set inline style.display value",
            "itemtype": "method",
            "name": "setDisplay",
            "params": [
                {
                    "name": "displayValue",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2097,
            "description": "Get inline style.display value",
            "itemtype": "method",
            "name": "getDisplay",
            "return": {
                "description": "display  current computed style setting for display",
                "type": "String"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2111,
            "description": "Set tabIndex value of the underlying HTML element",
            "itemtype": "method",
            "name": "setTabIndex",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2122,
            "description": "Get tabIndex value of the underlying HTML element",
            "itemtype": "method",
            "name": "getTabIndex",
            "return": {
                "description": "tab index",
                "type": "Number"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2131,
            "description": "Set inline style.position value",
            "itemtype": "method",
            "name": "setPositioning",
            "params": [
                {
                    "name": "postioning",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2142,
            "description": "Set inline style.left value",
            "itemtype": "method",
            "name": "setLeft",
            "params": [
                {
                    "name": "left",
                    "description": "in pixels",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2157,
            "description": "Get inline style.left value",
            "itemtype": "method",
            "name": "getLeft",
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2170,
            "description": "Set inline style.left value to null. Used to remove previously set left value",
            "itemtype": "method",
            "name": "setLeftNull",
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2182,
            "description": "Set inline style.right value",
            "itemtype": "method",
            "name": "setRight",
            "params": [
                {
                    "name": "rightValue",
                    "description": "right value in pixels",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2196,
            "description": "Get inline style.right value in pixels",
            "itemtype": "method",
            "name": "getRight",
            "return": {
                "description": "right value",
                "type": "Float"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2210,
            "description": "Set inline style.right value to null. Used to remove previously set right value",
            "itemtype": "method",
            "name": "setRightNull",
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2222,
            "description": "Set inline style.top value in pixels",
            "itemtype": "method",
            "name": "setTop",
            "params": [
                {
                    "name": "top",
                    "description": "top value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2237,
            "description": "Get computed style.top value in pixels",
            "itemtype": "method",
            "name": "getTop",
            "return": {
                "description": "top value in pixels",
                "type": "Float"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2251,
            "description": "Set inline style.top value to null. Used to clear previously set style.top value",
            "itemtype": "method",
            "name": "setTopNull",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2264,
            "description": "Set inline style.bottom value in pixels",
            "itemtype": "method",
            "name": "setBottom",
            "params": [
                {
                    "name": "bottomValue",
                    "description": "bottom value in pixels",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2276,
            "description": "Get computed style.bottom value in pixels",
            "itemtype": "method",
            "name": "getBottom",
            "return": {
                "description": "bottom value in pixels",
                "type": "Float"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2290,
            "description": "Set inline style.bottom value to null. Used to clear previously set value",
            "itemtype": "method",
            "name": "setBottomNull",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2301,
            "description": "Set inline zIndex value",
            "itemtype": "method",
            "name": "setZIndex",
            "params": [
                {
                    "name": "zIndex",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2315,
            "description": "Get inline zIndex value",
            "itemtype": "method",
            "name": "getZIndex",
            "return": {
                "description": "zIndex",
                "type": "Number"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2328,
            "description": "Set inline style.clear value",
            "itemtype": "method",
            "name": "setClear",
            "params": [
                {
                    "name": "clearEnum",
                    "description": "clear value to set",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2340,
            "description": "Set inline style.width to '100%'",
            "itemtype": "method",
            "name": "fullWidth",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2351,
            "description": "Set inline style.height to '100%'",
            "itemtype": "method",
            "name": "fullHeight",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2362,
            "description": "Set inline style.width to a string value",
            "itemtype": "method",
            "name": "setWidthStr",
            "params": [
                {
                    "name": "widthStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2374,
            "description": "Set inline style.height to a string value",
            "itemtype": "method",
            "name": "setHeightStr",
            "params": [
                {
                    "name": "heightStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2387,
            "description": "Set inline style.float to 'left'",
            "itemtype": "method",
            "name": "floatLeft",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2401,
            "description": "Set inline style.float to 'right'",
            "itemtype": "method",
            "name": "floatRight",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2415,
            "description": "Set inline style.backgroundColor value",
            "itemtype": "method",
            "name": "setBackgroundColor",
            "params": [
                {
                    "name": "backColor",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2427,
            "description": "Set inline style.opacity value",
            "itemtype": "method",
            "name": "setOpacity",
            "params": [
                {
                    "name": "opacityNumber",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2439,
            "description": "Set inline style.marginLeft value",
            "itemtype": "method",
            "name": "marginLeft",
            "params": [
                {
                    "name": "leftMargin",
                    "description": "margin left value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2451,
            "description": "Set inline style.marginRight value",
            "itemtype": "method",
            "name": "marginRight",
            "params": [
                {
                    "name": "rightMargin",
                    "description": "margin right value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2463,
            "description": "Set inline style.marginTop value",
            "itemtype": "method",
            "name": "marginTop",
            "params": [
                {
                    "name": "topMargin",
                    "description": "margin top value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2475,
            "description": "Set inline style.marginBottom value",
            "itemtype": "method",
            "name": "marginBottom",
            "params": [
                {
                    "name": "bottomMargin",
                    "description": "margin bottom value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2487,
            "description": "Set inline style.marginLeft, .marginRight, .marginTop, and .marginBottom to the same value",
            "itemtype": "method",
            "name": "marginAll",
            "params": [
                {
                    "name": "margin",
                    "description": "margin value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2504,
            "description": "Set inline style.paddingLeft value",
            "itemtype": "method",
            "name": "paddingLeft",
            "params": [
                {
                    "name": "leftPadding",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2516,
            "description": "Set inline style.paddingRight value",
            "itemtype": "method",
            "name": "paddingRight",
            "params": [
                {
                    "name": "rightPadding",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2528,
            "description": "Set inline style.paddingTop value",
            "itemtype": "method",
            "name": "paddingTop",
            "params": [
                {
                    "name": "topPadding",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2540,
            "description": "Set inline style.paddingBottom value",
            "itemtype": "method",
            "name": "paddingBottom",
            "params": [
                {
                    "name": "bottomPadding",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2552,
            "description": "Set inline style.paddingLeft, .paddingRight, .paddingTop, and .paddingBottom to the same value",
            "itemtype": "method",
            "name": "paddingAll",
            "params": [
                {
                    "name": "padding",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2569,
            "description": "Set inline style.borderLeftWidth, .borderLeftColor, and .borderLeftStyle",
            "itemtype": "method",
            "name": "borderLeft",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "style",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2587,
            "description": "Set inline style.borderRightWidth, .borderRightColor, and .borderRightStyle",
            "itemtype": "method",
            "name": "borderRight",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "style",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2605,
            "description": "Set inline style.borderTopWidth, .borderTopColor, and .borderTopStyle",
            "itemtype": "method",
            "name": "borderTop",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "style",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2623,
            "description": "Set inline style.borderBottomWidth, .borderBottomColor, and .borderBottomStyle",
            "itemtype": "method",
            "name": "borderBottom",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "style",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2641,
            "description": "Set inline style border value for top, bottom, left, and right",
            "itemtype": "method",
            "name": "borderAll",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "style",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2668,
            "description": "Set inline style.overflow value",
            "itemtype": "method",
            "name": "setOverflow",
            "params": [
                {
                    "name": "overflowSetting",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2682,
            "description": "Set inline style.cursor value",
            "itemtype": "method",
            "name": "setCursor",
            "params": [
                {
                    "name": "cursor",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2696,
            "description": "Set inline style.minHeight value",
            "itemtype": "method",
            "name": "minHeight",
            "params": [
                {
                    "name": "minHeightValue",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2709,
            "description": "Set inline style.maxHeight value",
            "itemtype": "method",
            "name": "setMaxHeight",
            "params": [
                {
                    "name": "maxHeightValue",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2721,
            "description": "Set inline style.maxWidth value",
            "itemtype": "method",
            "name": "setMaxWidth",
            "params": [
                {
                    "name": "maxWidthValue",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2733,
            "description": "Set inline style.verticalAlign value",
            "itemtype": "method",
            "name": "vAlign",
            "params": [
                {
                    "name": "vAlignValue",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2745,
            "description": "Set inline style.textAlign value",
            "itemtype": "method",
            "name": "textAlign",
            "params": [
                {
                    "name": "tAlignValue",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2757,
            "description": "Set inline style.listStyleType value",
            "itemtype": "method",
            "name": "listStyleType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2769,
            "description": "Get HTML element's style attribute which defines all inline style values",
            "itemtype": "method",
            "name": "getInlineStyle",
            "return": {
                "description": "inline style",
                "type": "Object"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2778,
            "description": "Get HTML element's computed style when available. Value is meaningful only when this element is attached to DOM",
            "itemtype": "method",
            "name": "getComputedStyle",
            "return": {
                "description": "computed style",
                "type": "Object"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2793,
            "description": "Set the parent element of this element.",
            "itemtype": "method",
            "name": "setParent",
            "params": [
                {
                    "name": "parent",
                    "description": "element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2804,
            "description": "Returns parent element of this element",
            "itemtype": "method",
            "name": "getParent",
            "return": {
                "description": "parent element",
                "type": "Object"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2813,
            "description": "Returns offset parent element of this element. offset parent element is the first element in ancestor path that is not static positioned",
            "itemtype": "method",
            "name": "getOffsetParent",
            "return": {
                "description": "offsetParent element",
                "type": "Object"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2832,
            "description": "Returns position relative to offset parent. Offset parent is the first ancestor element that is NOT statically positioned. When none presents, offset parent is document. The value is the position of the upper left corner of the layout box INCLUDING margin.",
            "itemtype": "method",
            "name": "getRelativePosition",
            "return": {
                "description": "postion  an object created by position.create(left, top)",
                "type": "Object"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2872,
            "description": "Returns position relative to document. The value is the position of the upper left corner of the layout box EXCLUDING margin (including border, padding, and content)",
            "itemtype": "method",
            "name": "getScreenPosition",
            "return": {
                "description": "postion  an object created by position.create(left, top)",
                "type": "Object"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2893,
            "description": "Returns position as defined by HTML element's (offsetLeft, offsetTop). This value excludes any margin of the element.",
            "itemtype": "method",
            "name": "getOffsetPosition",
            "return": {
                "description": "postion  an object created by position.create(left, top)",
                "type": "Object"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2902,
            "description": "Returns position as defined by HTML element's (scrollLeft, scrollTop).",
            "itemtype": "method",
            "name": "getScrollPosition",
            "return": {
                "description": "postion  an object created by position.create(left, top)",
                "type": "Object"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2911,
            "description": "Set inline style top and left value according to the postion",
            "itemtype": "method",
            "name": "moveToPosition",
            "params": [
                {
                    "name": "position",
                    "description": "a structure with (left, top) properties",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2923,
            "description": "Whether this element is currently attached to DOM",
            "itemtype": "method",
            "name": "isAttachedToDom",
            "return": {
                "description": "boolean"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2933,
            "description": "Notification function when this element is attached to DOM",
            "itemtype": "method",
            "name": "onAttachedToDom",
            "return": {
                "description": "current element to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2944,
            "description": "Notification function when this element is detached from DOM",
            "itemtype": "method",
            "name": "onDetachedFromDom",
            "return": {
                "description": "current element to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2956,
            "description": "Notification function when browser window changed its size. Responsive design support. Application root container should listen to windowElement size change event and call this function on its direct children so that this event can flood through the DOM tree. This should trigger reaction on all descendants of application root.",
            "itemtype": "method",
            "name": "onWindowSizeChanged",
            "return": {
                "description": "current element to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 2964,
            "description": "Notification function when absolutely positioned ancestor has changed its size. This is used for responsive support. Absolutely positioned element should call this function when its size is changed to allow descendants to respond.",
            "itemtype": "method",
            "name": "onAbsoluteParentSizeChanged",
            "return": {
                "description": "current element to support fluent style coding"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 3034,
            "description": "Notification function called when this element is to be garbage collected.",
            "itemtype": "method",
            "name": "dispose",
            "return": {
                "description": "null"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\element.js",
            "line": 3076,
            "description": "Returns whether this element is disposed. Used mainly for testing purpose.",
            "itemtype": "method",
            "name": "isDisposed",
            "return": {
                "description": "boolean"
            },
            "class": "element",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\fieldset.js",
            "line": 55,
            "description": "Get content of the legend attached to the fieldset",
            "itemtype": "method",
            "name": "getLegendContent",
            "return": {
                "description": "content of the legend",
                "type": "Element"
            },
            "class": "fieldset",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\fieldset.js",
            "line": 64,
            "description": "Set content of the legend attached to the fieldset",
            "itemtype": "method",
            "name": "setLegendContent",
            "params": [
                {
                    "name": "legendContent",
                    "description": "",
                    "type": "Element"
                }
            ],
            "class": "fieldset",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\figCaption.js",
            "line": 41,
            "description": "Set text of the caption",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "newText",
                    "description": "new text content",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "figCaption",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\figCaption.js",
            "line": 55,
            "description": "Get current text of the caption",
            "itemtype": "method",
            "name": "getText",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "figCaption",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\fileInput.js",
            "line": 46,
            "description": "Set acceptable file types of the file input",
            "itemtype": "method",
            "name": "setAcceptableTypes",
            "params": [
                {
                    "name": "acceptableTypes",
                    "description": "",
                    "type": "Array of acceptType"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "fileInput",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\fileInput.js",
            "line": 143,
            "description": "Whether current file is an image file.",
            "itemtype": "method",
            "name": "isImageFile",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "fileInput",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\fileInput.js",
            "line": 169,
            "description": "Get the name part of the file path",
            "itemtype": "method",
            "name": "getFileName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "fileInput",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\fileInput.js",
            "line": 181,
            "description": "Get current file type set",
            "itemtype": "method",
            "name": "getFileType",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "fileInput",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\fileInput.js",
            "line": 190,
            "description": "Set current file type",
            "itemtype": "method",
            "name": "setFileType",
            "params": [
                {
                    "name": "fileType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "fileInput",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\fileInput.js",
            "line": 201,
            "description": "Can accept content type and subtype",
            "itemtype": "method",
            "name": "canAccept",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "fileInput",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\form.js",
            "line": 71,
            "description": "Add a hidden input to the form",
            "itemtype": "method",
            "name": "addHiddenInput",
            "params": [
                {
                    "name": "id",
                    "description": "id attribute value",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "name attribute value",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value attribute value",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "form",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\form.js",
            "line": 97,
            "description": "Add an input to the form",
            "itemtype": "method",
            "name": "addInput",
            "params": [
                {
                    "name": "inputElement",
                    "description": "derived from inputElement",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "form",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\form.js",
            "line": 108,
            "description": "Set action attribute value",
            "itemtype": "method",
            "name": "setAction",
            "params": [
                {
                    "name": "action",
                    "description": "action attribute value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "form",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\form.js",
            "line": 120,
            "description": "Set method attribute value",
            "itemtype": "method",
            "name": "setMethod",
            "params": [
                {
                    "name": "method",
                    "description": "method attribute value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "form",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\form.js",
            "line": 135,
            "description": "Set enctype attribute value",
            "itemtype": "method",
            "name": "setEncType",
            "params": [
                {
                    "name": "encType",
                    "description": "enctype attribute value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "form",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\form.js",
            "line": 147,
            "description": "Set target attribute value",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "target",
                    "description": "target attribute value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "form",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\form.js",
            "line": 159,
            "description": "Submit the form",
            "itemtype": "method",
            "name": "submit",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "form",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\form.js",
            "line": 169,
            "description": "Reset values of all input in the form",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "form",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\iframe.js",
            "line": 68,
            "description": "Set iframe border",
            "itemtype": "method",
            "name": "setFrameBorder",
            "params": [
                {
                    "name": "border",
                    "description": "optional. default '0'. value for frameborder attribute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "iframe",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\iframe.js",
            "line": 82,
            "description": "Set src attribute value",
            "itemtype": "method",
            "name": "setUrl",
            "params": [
                {
                    "name": "url",
                    "description": "value for src attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "iframe",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\iframe.js",
            "line": 93,
            "description": "Get src attribute value",
            "itemtype": "method",
            "name": "getUrl",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "iframe",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\iframe.js",
            "line": 110,
            "description": "Reload the content of the iframe. Iframe often leads to cross doamin concerns. Even if you can load the content, there is no guarantee this function would work.",
            "itemtype": "method",
            "name": "reload",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "iframe",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\iframe.js",
            "line": 125,
            "description": "Attach listener for loaded event",
            "itemtype": "method",
            "name": "subscribeToLoad",
            "params": [
                {
                    "name": "callback",
                    "description": "when iframe content is loaded this function will be called with (listener, sender).",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "iframe",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\iframe.js",
            "line": 136,
            "description": "Detach listener for loaded event",
            "itemtype": "method",
            "name": "unsubscribeLoad",
            "params": [
                {
                    "name": "callback",
                    "description": ".",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "iframe",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\iframe.js",
            "line": 147,
            "description": "Returns the document object generated by an iframe",
            "itemtype": "method",
            "name": "getDocument",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "iframe",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\iframe.js",
            "line": 156,
            "description": "Toggle boolean flag to request this iframe to match the height of the content \nwhen iframe source content is loaded.\nUseful for responsive site where double vertical scrolling is annoying.\nOnly works when iframe source is from the same domain. CORS case may not work.",
            "itemtype": "method",
            "name": "toggleMatchContentHeight",
            "params": [
                {
                    "name": "match",
                    "description": "boolean, optional if not supplied, will flip current state"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "iframe",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\img.js",
            "line": 59,
            "description": "Set img content with base64 string",
            "itemtype": "method",
            "name": "setBase64Content",
            "params": [
                {
                    "name": "contentType",
                    "description": "content type",
                    "type": "String"
                },
                {
                    "name": "content",
                    "description": "base64 content string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "img",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\img.js",
            "line": 71,
            "description": "Set src attribute value",
            "itemtype": "method",
            "name": "setSrc",
            "params": [
                {
                    "name": "src",
                    "description": "value for src attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "img",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\img.js",
            "line": 82,
            "description": "Get src attribute value",
            "itemtype": "method",
            "name": "getSrc",
            "return": {
                "description": "src",
                "type": "String"
            },
            "class": "img",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\img.js",
            "line": 91,
            "description": "Set alt attribute value",
            "itemtype": "method",
            "name": "setAlt",
            "params": [
                {
                    "name": "alt",
                    "description": "value for alt",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "img",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\inputElement.js",
            "line": 55,
            "description": "Get value of the input element.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "Any"
            },
            "class": "inputElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\inputElement.js",
            "line": 64,
            "description": "Set value of the input element. Value change event listeners will be notified.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "newValue",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "inputElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\inputElement.js",
            "line": 80,
            "description": "Toggle enabled state of the input element",
            "itemtype": "method",
            "name": "toggleEditable",
            "params": [
                {
                    "name": "editable",
                    "description": "@optional",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "inputElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\inputElement.js",
            "line": 94,
            "description": "Returns enabled state",
            "itemtype": "method",
            "name": "isEditable",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "inputElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\ol.js",
            "line": 41,
            "description": "Add a list item",
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "content",
                    "description": "content of the item",
                    "type": "String or element"
                },
                {
                    "name": "data",
                    "description": "@optional. data attached to the item.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "ol",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\option.js",
            "line": 51,
            "description": "Get selected state of the option",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "option",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\option.js",
            "line": 60,
            "description": "Set selected state of the option",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "isSelected",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "option",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\option.js",
            "line": 72,
            "description": "Select this option",
            "itemtype": "method",
            "name": "select",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "option",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\option.js",
            "line": 82,
            "description": "Unselect this option",
            "itemtype": "method",
            "name": "unselect",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "option",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\position.js",
            "line": 37,
            "description": "Top value in pixels",
            "itemtype": "attribute",
            "name": "top",
            "class": "position",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\position.js",
            "line": 42,
            "description": "Left value in pixels",
            "itemtype": "attribute",
            "name": "left",
            "class": "position",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\select.js",
            "line": 49,
            "description": "Add an option to the select",
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "itemContent",
                    "description": "content of the item",
                    "type": "String or element"
                },
                {
                    "name": "value",
                    "description": "optional. data attached to the item",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "select",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\select.js",
            "line": 65,
            "description": "Select item by index",
            "itemtype": "method",
            "name": "selectItem",
            "params": [
                {
                    "name": "index",
                    "description": "index of the item",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "select",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\select.js",
            "line": 80,
            "description": "Select item by data attached to items",
            "itemtype": "method",
            "name": "selectValue",
            "params": [
                {
                    "name": "value",
                    "description": "data attached to item",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "select",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\select.js",
            "line": 99,
            "description": "Get index of selected item",
            "itemtype": "method",
            "name": "selectedIndex",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "select",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\select.js",
            "line": 108,
            "description": "Get data attached to the selected item",
            "itemtype": "method",
            "name": "selectedValue",
            "return": {
                "description": "Whatever data attached to the item",
                "type": "Any"
            },
            "class": "select",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\select.js",
            "line": 117,
            "description": "Get data attached to the selected item",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "Whatever data attached to the selected item",
                "type": "Any"
            },
            "class": "select",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\select.js",
            "line": 127,
            "description": "Set selected item by data attached",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "data to be matched",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "select",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\select.js",
            "line": 138,
            "description": "Attach value change event listener",
            "itemtype": "method",
            "name": "subscribeToValueChange",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function. This function will be called with (sender, value) when value is changed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "select",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\select.js",
            "line": 149,
            "description": "Detach value change event listener",
            "itemtype": "method",
            "name": "unsubscribeValueChange",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "select",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\size.js",
            "line": 37,
            "description": "Width value in pixels",
            "itemtype": "attribute",
            "name": "width",
            "class": "size",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\size.js",
            "line": 43,
            "description": "Height value in pixels",
            "itemtype": "attribute",
            "name": "height",
            "class": "size",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\spanText.js",
            "line": 48,
            "description": "Set text content",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "text",
                    "description": "content of the inner text node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "spanText",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\spanText.js",
            "line": 59,
            "description": "Get current text node content",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "spanText",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\spanText.js",
            "line": 68,
            "description": "Set text content",
            "itemtype": "method",
            "name": "setTextContent",
            "params": [
                {
                    "name": "text",
                    "description": "content of the inner text node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "spanText",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\spanText.js",
            "line": 80,
            "description": "Get current text node content",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "spanText",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\table.js",
            "line": 54,
            "description": "Add a column to the table",
            "itemtype": "method",
            "name": "addColumn",
            "params": [
                {
                    "name": "header",
                    "description": "header content of the column",
                    "type": "String or element"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "table",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\table.js",
            "line": 72,
            "description": "Add a row to the table",
            "itemtype": "method",
            "name": "addRow",
            "params": [
                {
                    "name": "tableRow",
                    "description": "",
                    "type": "Tr"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "table",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\table.js",
            "line": 83,
            "description": "Remove row by data attached to the row",
            "itemtype": "method",
            "name": "removeRowByData",
            "params": [
                {
                    "name": "data",
                    "description": "data to be matched",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "table",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\table.js",
            "line": 94,
            "description": "Factory method to create a row (tr)",
            "itemtype": "method",
            "name": "createRow",
            "return": {
                "description": "empty row",
                "type": "Tr"
            },
            "class": "table",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\table.js",
            "line": 103,
            "description": "Remove all rows",
            "itemtype": "method",
            "name": "clearRows",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "table",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\tbody.js",
            "line": 38,
            "description": "Remove row by data attached to the row",
            "itemtype": "method",
            "name": "removeRowByData",
            "params": [
                {
                    "name": "data",
                    "description": "data to be matched",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "tbody",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\textArea.js",
            "line": 45,
            "description": "Set cols attribute value",
            "itemtype": "method",
            "name": "cols",
            "params": [
                {
                    "name": "columns",
                    "description": "cols attribute value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "textArea",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\textArea.js",
            "line": 56,
            "description": "Set rows attribute value",
            "itemtype": "method",
            "name": "rows",
            "params": [
                {
                    "name": "rowsDef",
                    "description": "rows attribute value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "textArea",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\textBlock.js",
            "line": 51,
            "description": "Set text content",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "text",
                    "description": "content of the inner text node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "textBlock",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\textBlock.js",
            "line": 61,
            "description": "Get current text node content",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "textBlock",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\textBlock.js",
            "line": 70,
            "description": "Accessing underlying text node",
            "itemtype": "method",
            "name": "getTextElement",
            "return": {
                "description": "",
                "type": "TextNode"
            },
            "class": "textBlock",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\textBlock.js",
            "line": 79,
            "description": "Set text content",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "text",
                    "description": "content of the inner text node",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "textBlock",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\textBlock.js",
            "line": 90,
            "description": "Get current text node content",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "textBlock",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\textInput.js",
            "line": 46,
            "description": "Select all content",
            "itemtype": "method",
            "name": "selectAll",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "textInput",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\textNode.js",
            "line": 40,
            "description": "Set text content",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "newText",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "textNode",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\textNode.js",
            "line": 52,
            "description": "Get current text content",
            "itemtype": "method",
            "name": "getText",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "textNode",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\tfoot.js",
            "line": 43,
            "description": "Add a cell to the footer",
            "itemtype": "method",
            "name": "addCell",
            "params": [
                {
                    "name": "cellTemplate",
                    "description": "cell content",
                    "type": "Td"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "tfoot",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\thead.js",
            "line": 43,
            "description": "Add a column header cell to table header row",
            "itemtype": "method",
            "name": "addColumnHeader",
            "params": [
                {
                    "name": "colHeader",
                    "description": "column header content",
                    "type": "Th"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "thead",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\touchEvent.js",
            "line": 41,
            "description": "A Boolean value indicating whether or not the alt key was down when the touch event was fired. Read only.",
            "itemtype": "attribute",
            "name": "altKey",
            "class": "touchEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\touchEvent.js",
            "line": 46,
            "description": "A TouchList of all the Touch objects representing individual points of contact whose states changed between the previous touch event and this one. Read only.",
            "itemtype": "attribute",
            "name": "changedTouches",
            "class": "touchEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\touchEvent.js",
            "line": 51,
            "description": "A Boolean value indicating whether or not the control key was down when the touch event was fired. Read only.",
            "itemtype": "attribute",
            "name": "ctrlKey",
            "class": "touchEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\touchEvent.js",
            "line": 56,
            "description": "A Boolean value indicating whether or not the meta key was down when the touch event was fired. Read only.",
            "itemtype": "attribute",
            "name": "metaKey",
            "class": "touchEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\touchEvent.js",
            "line": 61,
            "description": "A Boolean value indicating whether or not the shift key was down when the touch event was fired. Read only.",
            "itemtype": "attribute",
            "name": "shiftKey",
            "class": "touchEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\touchEvent.js",
            "line": 66,
            "description": "A TouchList of all the Touch objects that are both currently in contact with the touch surface and were also started on the same element that is the target of the event. Read only.",
            "itemtype": "attribute",
            "name": "targetTouches",
            "class": "touchEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\touchEvent.js",
            "line": 71,
            "description": "A TouchList of all the Touch objects representing all current points of contact with the surface, regardless of target or changed status. Read only.",
            "itemtype": "attribute",
            "name": "touches",
            "class": "touchEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\touchEvent.js",
            "line": 76,
            "description": "The type of touch event that occurred. See Touch event types for possible values and details.\n\n- touchstart\n\nSent when the user places a touch point on the touch surface. The event's target will be the element in which the touch occurred.\n\n- touchend\n\nSent when the user removes a touch point from the surface (that is, when they lift a finger or stylus from the surface). This is also sent if the touch point moves off the edge of the surface; for example, if the user's finger slides off the edge of the screen.\n\nThe event's target is the same element that received the touchstart event corresponding to the touch point, even if the touch point has moved outside that element.\n\nThe touch point (or points) that were removed from the surface can be found in the TouchList specified by the changedTouches attribute.\n\n- touchmove\nSent when the user moves a touch point along the surface. The event's target is the same element that received the touchstart event corresponding to the touch point, even if the touch point has moved outside that element.\n\nThis event is also sent if the values of the radius, rotation angle, or force attributes of a touch point change.\n\nNote: The rate at which touchmove events is sent is browser-specific, and may also vary depending on the capability of the user's hardware. You must not rely on a specific granularity of these events.\n\n- touchenter\nSent when a touch point enters an element.\n\nNote: These events don't bubble.\n\n- touchleave\nSent when a touch point exits an element.",
            "itemtype": "attribute",
            "name": "type",
            "class": "touchEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\touchEvent.js",
            "line": 108,
            "description": "The target of the touches associated with this event. This target corresponds to the target of all the touches in the targetTouches attribute, but note that other touches in this event may have a different target. To be careful, you should use the target associated with individual touches.",
            "itemtype": "attribute",
            "name": "target",
            "class": "touchEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\touchEvent.js",
            "line": 114,
            "description": "Get screen position of the touch event",
            "itemtype": "method",
            "name": "screenPosition",
            "return": {
                "description": "screen position  object constructed with position class using (screenX, screenY) of touchEvent.changedTouches[0]",
                "type": "Position"
            },
            "class": "touchEvent",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\tr.js",
            "line": 42,
            "description": "Add a cell to the table row",
            "itemtype": "method",
            "name": "addCell",
            "params": [
                {
                    "name": "cellTemplate",
                    "description": "cell content",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "tr",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\ul.js",
            "line": 41,
            "description": "Add a list item by its content and data",
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "content",
                    "description": "item content",
                    "type": "Element"
                },
                {
                    "name": "data",
                    "description": "optional. data attached to the item",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "ul",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\valueElement.js",
            "line": 48,
            "description": "Attach a value change event listener.",
            "itemtype": "method",
            "name": "subscribeToValueChange",
            "params": [
                {
                    "name": "callback",
                    "description": "This function will be called with (sender, value) when value of this element is changed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "valueElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\valueElement.js",
            "line": 60,
            "description": "Detach a value change event listener",
            "itemtype": "method",
            "name": "unsubscribeValueChange",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "valueElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\valueElement.js",
            "line": 77,
            "description": "Notify all value change listeners with current value.",
            "itemtype": "method",
            "name": "raiseValueChanged",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "valueElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\valueElement.js",
            "line": 87,
            "description": "Returns current value this element contains",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "value",
                "type": "Any"
            },
            "class": "valueElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\valueElement.js",
            "line": 95,
            "description": "Set value of this element",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "value for the element",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "valueElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\valueElement.js",
            "line": 104,
            "description": "Forward all public functions to another value element. Useful when creating a control that expose value element functions but implement these functions in a child element.",
            "itemtype": "method",
            "name": "forwardValueFuncations",
            "params": [
                {
                    "name": "valueContainer",
                    "description": "",
                    "type": "ValueElement"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "valueElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\video.js",
            "line": 52,
            "description": "Add a source by specifying src, type, and media",
            "itemtype": "method",
            "name": "addSource",
            "params": [
                {
                    "name": "src",
                    "description": "src attribute value for the source",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "type attribute value for the source",
                    "type": "String"
                },
                {
                    "name": "media",
                    "description": "media attribute value for the source",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "video",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\windowElement.js",
            "line": 100,
            "description": "Resize window to the size specified",
            "itemtype": "method",
            "name": "resizeTo",
            "params": [
                {
                    "name": "size:",
                    "description": "size, expected window inner size"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "windowElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\windowElement.js",
            "line": 110,
            "description": "Scroll window to specified offset",
            "itemtype": "method",
            "name": "scrollTo",
            "params": [
                {
                    "name": "xpos",
                    "description": "horizontal offset in pixels",
                    "type": "Float"
                },
                {
                    "name": "ypos",
                    "description": "vertical offset in pixels;",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "windowElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\windowElement.js",
            "line": 122,
            "description": "Scroll window by specified distance",
            "itemtype": "method",
            "name": "scrollBy",
            "params": [
                {
                    "name": "xDist",
                    "description": "horizontal distance to scroll in pixels",
                    "type": "Float"
                },
                {
                    "name": "yDist",
                    "description": "vertical distance to scroll in pixels",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "windowElement",
            "module": "elements"
        },
        {
            "file": "lib\\elements\\windowElement.js",
            "line": 134,
            "description": "Get window scroll offset",
            "itemtype": "method",
            "name": "getPageOffset",
            "return": {
                "description": "pageOffset  position of the page top left corner relative to window top left corner",
                "type": "Position"
            },
            "class": "windowElement",
            "module": "elements"
        },
        {
            "file": "lib\\observe\\acceptType.js",
            "line": 48,
            "description": "String representation of this object, e.g. 'image/*'",
            "itemtype": "method",
            "name": "asString",
            "return": {
                "description": "string"
            },
            "class": "acceptType",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\acceptType.js",
            "line": 57,
            "description": "Equivalence test",
            "itemtype": "method",
            "name": "equals",
            "return": {
                "description": "boolean"
            },
            "class": "acceptType",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\acceptType.js",
            "line": 67,
            "description": "Test inclusiveness",
            "itemtype": "method",
            "name": "includes",
            "return": {
                "description": "boolean"
            },
            "class": "acceptType",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\bindButtonCommand.js",
            "line": 87,
            "description": "Release the binding. command's canExecute function no longer update Button's enabled state and button click no longer invoke command body",
            "itemtype": "method",
            "name": "unbind",
            "class": "bindButtonCommand",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\bindFileInput.js",
            "line": 112,
            "description": "Returns the view element bound",
            "itemtype": "method",
            "name": "getViewElement",
            "return": {
                "description": "view element passed into constructor",
                "type": "Object"
            },
            "class": "bindFileProperty",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\bindFileInput.js",
            "line": 121,
            "description": "Returns the model object bound",
            "itemtype": "method",
            "name": "getModel",
            "return": {
                "description": "model passed into constructor",
                "type": "Object"
            },
            "class": "bindFileProperty",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\bindProperty.js",
            "line": 103,
            "description": "Returns the view element bound",
            "itemtype": "method",
            "name": "getViewElement",
            "return": {
                "description": "view element passed into constructor",
                "type": "Object"
            },
            "class": "bindProperty",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\bindProperty.js",
            "line": 112,
            "description": "Returns the model object bound",
            "itemtype": "method",
            "name": "getModel",
            "return": {
                "description": "model passed into constructor",
                "type": "Object"
            },
            "class": "bindProperty",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 79,
            "description": "Add a data model to the collection.",
            "itemtype": "method",
            "name": "addModel",
            "params": [
                {
                    "name": "childModel",
                    "description": "modelBase or its derived class",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "@optional. Position to add the model. If not provided, childModel will be added to the end of the collection.",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 93,
            "description": "Add a data model to the collection by providing data (not model)",
            "itemtype": "method",
            "name": "addData",
            "params": [
                {
                    "name": "childDto",
                    "description": ". A model object will be create using the model factory provided in constructor of this class and added to the collection.",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "@optional. Position to add the model. If not provided, childModel will be added to the end of the collection.",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 105,
            "description": "Remove the model at specified index. The contained model is removed from the collection but not disposed. It is caller's responsibility for proper disposal of the model.",
            "itemtype": "method",
            "name": "removeAt",
            "params": [
                {
                    "name": "index",
                    "description": "position of the model in this collection",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "model removed."
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 120,
            "description": "Remove a model contained in this collection. The contained model is removed from the collection but not disposed. It is caller's responsibility for proper disposal of the model.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "childModel",
                    "description": "an instance of modelBase or its derived class",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "model removed."
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 133,
            "description": "Remove the model at specified index and disposed it.",
            "itemtype": "method",
            "name": "deleteAt",
            "params": [
                {
                    "name": "index",
                    "description": "position of the model in this collection",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 145,
            "description": "Remove a model contained in this collection and dispose it.",
            "itemtype": "method",
            "name": "deleteModel",
            "params": [
                {
                    "name": "childModel",
                    "description": "an instance of modelBase or its derived class",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 159,
            "description": "Remove all models in this collection. All contained models will be disposed.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 176,
            "description": "Number of models contained in this collection",
            "itemtype": "method",
            "name": "numOfModels",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 185,
            "description": "Retrive the model at specified index in this collection",
            "itemtype": "method",
            "name": "getModel",
            "params": [
                {
                    "name": "index",
                    "description": "index of the model to retrieve",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "model  instance of modelBase or its derived class",
                "type": "Object"
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 195,
            "description": "Execute a specified function for every model contained in this collection.",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "func",
                    "description": "function to execute",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 207,
            "description": "Filter models contained in this collection with a specified function.",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "func",
                    "description": "A model is included in the returned array when this function is invoked on a model the result is true",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "array of instances of modelBase or its derived class",
                "type": "Array"
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 222,
            "description": "Subscribe to collection changed event with a callback function. When a model is added or removed from this collection, or this collection is cleared, collection changed event will be raised.",
            "itemtype": "method",
            "name": "subscribeToCollectionChange",
            "params": [
                {
                    "name": "callback",
                    "description": "this function will be called with (sender, eventArg) where sender is this object and eventArg is a structure. When a model is added, eventArg structure is { \"change\": 'added', \"item\": model, \"index\": index of the newly added model within the collection after it is added }. When a model is removed, eventArg structure is { \"change\": 'removed', \"item\": model, \"index\": index of the model before it is removed from the collection }. When this collection is cleared, eventArg structure is { \"change\": 'cleared', \"item\": this collection }.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 234,
            "description": "Unsubscribe collection changed event notification",
            "itemtype": "method",
            "name": "unsubscribeCollectionChange",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 246,
            "description": "Subscribe to model changed event. When any property in this model, or any of its contained model, or any model contain in its collection models, changed, callback function will be called.",
            "itemtype": "method",
            "name": "subscribeToModelChange",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function when model changed. When model is changed, this function will be invoked with (sender, eventArg). sender is this object and eventArg contains attribute \"source\" whose value contains the source object that has been changed. Other attributes in the eventArg provide more information about the change. For property value change, it also contains all information a property change event argument contains. For collection change, it also contains all information a collection change event argument contains.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 257,
            "description": "Unsubscribe model changed event.",
            "itemtype": "method",
            "name": "unsubscribeModelChange",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 268,
            "description": "Get current data collection array",
            "itemtype": "method",
            "name": "getData",
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 293,
            "description": "Create a clone of this object",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "an instance of this class containing exactly the same data value. Underlying data array is an object different from the array contained in this object. Contents of the two arrays are also completely independent.",
                "type": "Object"
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 306,
            "description": "Set the JSON data to a different value. Useful for cloning and copying.",
            "itemtype": "method",
            "name": "resetData",
            "params": [
                {
                    "name": "that",
                    "description": ".",
                    "type": "Array of object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 337,
            "description": "Set this model to be a copy of the input model.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "that",
                    "description": "",
                    "type": "CollectionModelBase or its derived"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\collectionModelBase.js",
            "line": 348,
            "description": "Dispose the model. All subscribed callbacks will be released. All contained models are disposed.",
            "class": "collectionModelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\command.js",
            "line": 63,
            "description": "Returns enabled state of the command",
            "itemtype": "method",
            "name": "canExecute",
            "params": [
                {
                    "name": "data",
                    "description": "parameter to refresh enabled state with",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "class": "command",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\command.js",
            "line": 74,
            "description": "Execute command body",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "data",
                    "description": "data to pass into command body",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "command",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\command.js",
            "line": 90,
            "description": "Notify all subscribers of current enabled state",
            "itemtype": "method",
            "name": "notifyObservers",
            "params": [
                {
                    "name": "data",
                    "description": "data to pass into canExecute function",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "command",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\command.js",
            "line": 102,
            "description": "Attach a dispose event listener.",
            "itemtype": "method",
            "name": "subscribeToDispose",
            "params": [
                {
                    "name": "callback",
                    "description": "when this model object is disposed, callback function will be invoked with a single argument of this model.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "command",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\command.js",
            "line": 113,
            "description": "Detach a dispose event listener",
            "itemtype": "method",
            "name": "unsubscribeDispose",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "command",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\command.js",
            "line": 125,
            "description": "Dispose current object",
            "itemtype": "method",
            "name": "dispose",
            "class": "command",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\customEvent.js",
            "line": 43,
            "description": "remove all subscribers",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "The object itself to support fluent style coding"
            },
            "class": "customEvent",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\customEvent.js",
            "line": 55,
            "description": "attach an event subscriber",
            "itemtype": "method",
            "name": "subscribe",
            "return": {
                "description": "current object to support fluent style coding"
            },
            "params": [
                {
                    "name": "callback",
                    "description": "callback function when event is raised. (sender, eventArgs) will be passed into this function when event is raised",
                    "type": "Function"
                }
            ],
            "class": "customEvent",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\customEvent.js",
            "line": 82,
            "description": "detach an event subscriber",
            "itemtype": "method",
            "name": "unsubscribe",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function when event is raised.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The object itself to support fluent style coding"
            },
            "class": "customEvent",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\customEvent.js",
            "line": 106,
            "description": "returns number of subscribers of the event",
            "itemtype": "method",
            "name": "numOfListeners",
            "class": "customEvent",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\customEvent.js",
            "line": 115,
            "description": "returns {callback} function",
            "itemtype": "method",
            "name": "getListener",
            "params": [
                {
                    "name": "index",
                    "description": "index of the subscriber, subscribers are indexed in the sequence of subscription.",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "callback attached at given index",
                "type": "Function"
            },
            "class": "customEvent",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\customEvent.js",
            "line": 126,
            "description": "raise the event from sender with the given event argument. All callback functions will be called with (sender, eventArg) parameters",
            "itemtype": "method",
            "name": "raiseEvent",
            "params": [
                {
                    "name": "sender",
                    "description": "source of the event",
                    "type": "Object"
                },
                {
                    "name": "eventArg",
                    "description": "event argument, payload",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The event object itself to support fluent style coding."
            },
            "class": "customEvent",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\customEvent.js",
            "line": 142,
            "description": "Dispose current object",
            "itemtype": "method",
            "name": "dispose",
            "class": "customEvent",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\fileHandlingModelFactory.js",
            "line": 70,
            "description": "Create modelBase instance representing a file type.",
            "itemtype": "method",
            "name": "createFileTypeModel",
            "params": [
                {
                    "name": "fileTypeDto",
                    "description": "Expecting an object used to construct filePropertyModel. C.f. filePropertyModel constructor for details.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "instance of filePropertyModel or its derived class",
                "type": "Object"
            },
            "class": "fileHandlingModelFactory",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\fileHandlingModelFactory.js",
            "line": 80,
            "description": "Create modelBase instance representing a file value.",
            "itemtype": "method",
            "name": "createFileValueModel",
            "params": [
                {
                    "name": "fileValueDto",
                    "description": "Expecting an object used to construct fileValueModel. C.f. fileValueModel constructor for details.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "instance of fileValueModel or its derived class",
                "type": "Object"
            },
            "class": "fileHandlingModelFactory",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\fileHandlingModelFactory.js",
            "line": 90,
            "description": "Create modelBase instance representing a file property.",
            "itemtype": "method",
            "name": "createFilePropertyModel",
            "params": [
                {
                    "name": "filePropertyDto",
                    "description": "Expecting an object used to construct filePropertyModel. C.f. filePropertyModel constructor for details.",
                    "type": "Object"
                },
                {
                    "name": "overrideFactory",
                    "description": ", @optional If provided, this object must implement all public functions of this class.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "instance of filePropertyModel or its derived class",
                "type": "Object"
            },
            "class": "fileHandlingModelFactory",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\fileHandlingModelFactory.js",
            "line": 101,
            "description": "Create modelBase instance representing a multi-file property.",
            "itemtype": "method",
            "name": "createMultiFilePropertyModel",
            "params": [
                {
                    "name": "multiFilePropertyDto",
                    "description": "Expecting an object used to construct multiFilePropertyModel. C.f. multiFilePropertyModel constructor for details.",
                    "type": "Object"
                },
                {
                    "name": "overrideFactory",
                    "description": ", @optional If provided, this object must implement all public functions of this class.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "instance of multiFilePropertyModel or its derived class",
                "type": "Object"
            },
            "class": "fileHandlingModelFactory",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\filePropertyModel.js",
            "line": 67,
            "description": "Whether current file type is an image file.",
            "itemtype": "method",
            "name": "isImageFile",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "filePropertyModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\filePropertyModel.js",
            "line": 76,
            "description": "Retrieve a collectionModelBase instance representing acceptable file types of this file property.",
            "itemtype": "method",
            "name": "getAcceptableTypes",
            "return": {
                "description": "instance of collectionModelBase or its derived class",
                "type": "Object"
            },
            "class": "filePropertyModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\filePropertyModel.js",
            "line": 85,
            "description": "Retrieve the file key string for this file property. File key is a string unique within the containing object for identifying the file stream for this file property when uploading files in a form.",
            "itemtype": "method",
            "name": "getFileKey",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "filePropertyModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\filePropertyModel.js",
            "line": 94,
            "description": "Retrieve current file value of this file property. Used for binding this file property to a UI element.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "file name for this file property.",
                "type": "String"
            },
            "class": "filePropertyModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\filePropertyModel.js",
            "line": 103,
            "description": "Set file value for this file property. Used for binding this file property to a UI element.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "fileName",
                    "description": "file path as set by the UI element bound",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "filePropertyModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\filePropertyModel.js",
            "line": 114,
            "description": "Retrieve the underlying fileValueModel instance associated with this file property.",
            "itemtype": "method",
            "name": "getValueModel",
            "return": {
                "description": "instance of fileValueModel or its derived class.",
                "type": "Object"
            },
            "class": "filePropertyModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\fileTypeModel.js",
            "line": 53,
            "description": "Retrieve the content type of the file type",
            "itemtype": "method",
            "name": "getContentType",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "fileTypeModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\fileTypeModel.js",
            "line": 62,
            "description": "Retrieve the sub type of this file type",
            "itemtype": "method",
            "name": "getSubtype",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "fileTypeModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\fileValueModel.js",
            "line": 58,
            "description": "Retrieve current file name",
            "itemtype": "method",
            "name": "getFileName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "fileValueModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\fileValueModel.js",
            "line": 67,
            "description": "Set file name",
            "itemtype": "method",
            "name": "setFileName",
            "params": [
                {
                    "name": "fileName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "fileValueModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\fileValueModel.js",
            "line": 78,
            "description": "Set current file content type.",
            "itemtype": "method",
            "name": "setCurrentContentType",
            "params": [
                {
                    "name": "contentType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "fileValueModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\fileValueModel.js",
            "line": 89,
            "description": "Retrieve current file content type",
            "itemtype": "method",
            "name": "getCurrentContentType",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "fileValueModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\fileValueModel.js",
            "line": 98,
            "description": "Retrieve file key string",
            "itemtype": "method",
            "name": "getFileKey",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "fileValueModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 115,
            "description": "Raise property error",
            "itemtype": "method",
            "name": "raisePropertyError",
            "params": [
                {
                    "name": "propName",
                    "description": "name of the property in error",
                    "type": "String"
                },
                {
                    "name": "errArg",
                    "description": "used to pass error message when it is a string. If an object is provided, error message is expected at \"error\" attribute. Subscribed error listeners (via subscribeToError) will be notified with (sender, arg) where arg.error contains error message and other parameters may be passed in arg when errArg is an object.",
                    "type": "Object or string"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 145,
            "description": "Dismiss error message on a property. Derived classes are expected to call this function when validation error is dismissed.",
            "itemtype": "method",
            "name": "dismissPropertyError",
            "params": [
                {
                    "name": "propertyName",
                    "description": "name of the property whose error message should be dismissed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 159,
            "description": "Subscribe to property value change event.",
            "itemtype": "method",
            "name": "subscribeToValueChange",
            "params": [
                {
                    "name": "propertyName",
                    "description": "a valid property name of this object",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback function. This function will be called with (sender, arg) when any property of this object has changed its value where arg is an object of the format { \"propertyName\": propName, \"value\": val }",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 172,
            "description": "Unsubscribe from property change event notification",
            "itemtype": "method",
            "name": "unsubscribeValueChange",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function",
                    "type": "Function"
                },
                {
                    "name": "propertyName",
                    "description": "a valid property name of this object",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 186,
            "description": "Subscribe to property value error event.",
            "itemtype": "method",
            "name": "subscribeToError",
            "params": [
                {
                    "name": "propertyName",
                    "description": "a valid property name of this object",
                    "type": "String"
                },
                {
                    "name": "onError",
                    "description": "callback function. This function will be called with (sender, arg) when any property of this object or its descendant is in an error state. Error message is expected at arg.error.",
                    "type": "Function"
                },
                {
                    "name": "onDismissError",
                    "description": "callback function. This function will be called with (sender, arg) when any property of this object is no longer in an error state.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 204,
            "description": "Unsubscribe from property value error event notification",
            "itemtype": "method",
            "name": "unsubscribeError",
            "params": [
                {
                    "name": "propertyName",
                    "description": "a valid property name of this object",
                    "type": "String"
                },
                {
                    "name": "onError",
                    "description": "callback function.",
                    "type": "Function"
                },
                {
                    "name": "onDismissError",
                    "description": "callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 222,
            "description": "Subscribe to model changed event. When any property in this model, or any of its contained model, or any model in its contained collection models, changed, callback function will be called.",
            "itemtype": "method",
            "name": "subscribeToModelChange",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function when model changed. When model is changed, this function will be invoked with (sender, eventArg). sender is this object and eventArg contains attribute \"source\" whose value contains the source object that has been changed. Other attributes in the eventArg provide more information about the change. For property value change, it also contains all information a property change event argument contains. For collection change, it also contains all information a collection change event argument contains.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 233,
            "description": "Unsubscribe model changed event.",
            "itemtype": "method",
            "name": "unsubscribeModelChange",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 244,
            "description": "Attach a dispose event listener.",
            "itemtype": "method",
            "name": "subscribeToDispose",
            "params": [
                {
                    "name": "callback",
                    "description": "when this model object is disposed, callback function will be invoked with a single argument of this model.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 255,
            "description": "Detach a dispose event listener",
            "itemtype": "method",
            "name": "unsubscribeDispose",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 267,
            "description": "Get all property names for this object. Properties whose value are objects or array will not be included.",
            "itemtype": "method",
            "name": "getPropertyNames",
            "return": {
                "description": "",
                "type": "Array of string"
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 282,
            "description": "Get all property names of this object whose value is an object.",
            "itemtype": "method",
            "name": "getChildNames",
            "return": {
                "description": "",
                "type": "Array of string"
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 297,
            "description": "Get model instance constructed with the named property value.",
            "itemtype": "method",
            "name": "getChildModel",
            "params": [
                {
                    "name": "childName",
                    "description": "one of the names returned by getChildNames method.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "modelBase instance",
                "type": "Object"
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 307,
            "description": "Get all property names of this object whose value is an array.",
            "itemtype": "method",
            "name": "getCollectionNames",
            "return": {
                "description": "",
                "type": "Array of string"
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 322,
            "description": "Get collectionModelBase instance constructed with the named property value.",
            "itemtype": "method",
            "name": "getCollectionModel",
            "params": [
                {
                    "name": "collectionName",
                    "description": "one of the names returned by getCollectionNames method.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "collectionModelBase instance",
                "type": "Object"
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 333,
            "description": "Get localized label for a property name. Derived classes are expected to return localized label. Default behaviour is to return property name as is.",
            "itemtype": "method",
            "name": "getLocalizedPropertyLabel",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 344,
            "description": "Get localized string representation of the value of a named property. Derived classes are expected to return localized string. Default behaviour is to return property value as is except Date value which returns date.toLocaleString().",
            "itemtype": "method",
            "name": "getLocalizedValue",
            "params": [
                {
                    "name": "name",
                    "description": "property name",
                    "type": "String"
                }
            ],
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 357,
            "description": "Get value of a property.",
            "itemtype": "method",
            "name": "getPropertyValue",
            "params": [
                {
                    "name": "name",
                    "description": "property name as provided in getPropertyNames function.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 377,
            "description": "Set value of a property",
            "itemtype": "method",
            "name": "setPropertyValue",
            "params": [
                {
                    "name": "name",
                    "description": "property name as provided in getPropertyNames function.",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "value to set",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 411,
            "description": "Create a clone of the object. Derived classes are expected to override this function to construct a clone of itself in derived class. Useful for storing an initial copy before modifying. Be careful with Date value cloning.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "an object of modelBase class or its derived class",
                "type": "Object"
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 426,
            "description": "Set the data of this model to a different value. Useful for cloning and copying.",
            "itemtype": "method",
            "name": "resetData",
            "params": [
                {
                    "name": "that",
                    "description": ".",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 553,
            "description": "Set this model to be a copy of the input model.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "that",
                    "description": "",
                    "type": "ModelBase or its derived"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 563,
            "description": "Get a serialized version of the current data for transportation.",
            "itemtype": "method",
            "name": "getSerializedData",
            "return": {
                "description": "a JSON serialized version of current data.",
                "type": "String"
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 572,
            "description": "Get underlying data. Used for testing and debugging purpose. \nApplication should try everything possible not to break data encapsulation.",
            "itemtype": "method",
            "name": "getData",
            "return": {
                "description": "data object",
                "type": "Object"
            },
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelBase.js",
            "line": 583,
            "description": "Dispose the model. All subscribed callback will no longer be notified.",
            "class": "modelBase",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelFactory.js",
            "line": 39,
            "description": "Create a modelBase instance with provided data transportation object",
            "itemtype": "method",
            "name": "createModel",
            "params": [
                {
                    "name": "dto",
                    "description": "usually created by JSON.parse from communication layer",
                    "type": "Object"
                },
                {
                    "name": "overrideFactory",
                    "description": "@optional, if not provided default modelFactory will be used. The object must implement public functions of this class if provided.",
                    "type": "Object"
                }
            ],
            "class": "modelFactory",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\modelFactory.js",
            "line": 49,
            "description": "Create a collectionModelBase instance with an array of data transportation objects.",
            "itemtype": "method",
            "name": "createCollectionModel",
            "params": [
                {
                    "name": "arrayDto",
                    "description": "usually created by JSON.parse from communication layer. An array of objects.",
                    "type": "Array"
                },
                {
                    "name": "overrideFactory",
                    "description": "@optional, if not provided default modelFactory will be used. The object must implement public functions of this class if provided.",
                    "type": "Object"
                }
            ],
            "class": "modelFactory",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\multiFilePropertyModel.js",
            "line": 56,
            "description": "Retrieve a collectionModelBase instance representing all files contained in this property.",
            "itemtype": "method",
            "name": "getFileCollection",
            "return": {
                "description": "collectionModelBase or its derived class",
                "type": "Object"
            },
            "class": "multiFilePropertyModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\multiFilePropertyModel.js",
            "line": 65,
            "description": "Retrieve a collectionModelBase instance representing all file types acceptable for this property.",
            "itemtype": "method",
            "name": "getAcceptableTypes",
            "return": {
                "description": "instance of collectionModelBase or its derived class",
                "type": "Object"
            },
            "class": "multiFilePropertyModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\multiFilePropertyModel.js",
            "line": 78,
            "description": "Add a file value to this property",
            "itemtype": "method",
            "name": "addFile",
            "params": [
                {
                    "name": "filePropModel",
                    "description": "instance of filePropertyModel or its derived class",
                    "type": "Object"
                }
            ],
            "class": "multiFilePropertyModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\multiFilePropertyModel.js",
            "line": 90,
            "description": "Remove a file value from this property",
            "itemtype": "method",
            "name": "removeFile",
            "params": [
                {
                    "name": "filePropModel",
                    "description": "instance of filePropertyModel or its derived class",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding"
            },
            "class": "multiFilePropertyModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\multiFilePropertyModel.js",
            "line": 102,
            "description": "Number of files added to this property",
            "itemtype": "method",
            "name": "numOfFiles",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "multiFilePropertyModel",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\observable.js",
            "line": 43,
            "description": "raised value changed event with data provided as payload",
            "itemtype": "method",
            "name": "raiseEvent",
            "params": [
                {
                    "name": "data",
                    "description": "the event argument",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The object itself to support fluent style coding"
            },
            "class": "observable",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\observable.js",
            "line": 55,
            "description": "Attach a value change listener",
            "itemtype": "method",
            "name": "subscribeToValueChange",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function when event is raised. (sender, data) will be passed into this function when event is raised where the sender is current object",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "observable",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\observable.js",
            "line": 67,
            "description": "Detach a value change listener",
            "itemtype": "method",
            "name": "unsubscribeValueChange",
            "params": [
                {
                    "name": "callback",
                    "description": "callback function when event is raised.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The object itself to support fluent style coding"
            },
            "class": "observable",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\observable.js",
            "line": 79,
            "description": "Remove all value change listeners",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "The object itself to support fluent style coding"
            },
            "class": "observable",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\observable.js",
            "line": 89,
            "description": "Dispose current object",
            "itemtype": "method",
            "name": "dispose",
            "class": "observable",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\observableCollection.js",
            "line": 65,
            "description": "Attach collection change listener",
            "itemtype": "method",
            "name": "subscribeToChange",
            "params": [
                {
                    "name": "callback",
                    "description": "a function to call when collection changes. Callback function will be invoked with (sender, payload) parameters. Palyload parameter is a structure { change: 'add'/'remove'/'clear', item: object added/removed or collection itself when change is 'remove' }",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "observableCollection",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\observableCollection.js",
            "line": 78,
            "description": "Detach collection change listener",
            "itemtype": "method",
            "name": "unsubscribeChange",
            "params": [
                {
                    "name": "callback",
                    "description": "a function to call when collection changes.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "observableCollection",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\observableCollection.js",
            "line": 91,
            "description": "Add item to the collection",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "item",
                    "description": "item to add",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "observableCollection",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\observableCollection.js",
            "line": 104,
            "description": "Remove item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "item to remove",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "observableCollection",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\observableCollection.js",
            "line": 121,
            "description": "Remove all items from the collection",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "current object to support fluent style coding."
            },
            "class": "observableCollection",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\observableCollection.js",
            "line": 133,
            "description": "Number of items in the collection",
            "itemtype": "method",
            "name": "numOfItems",
            "class": "observableCollection",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\observableCollection.js",
            "line": 142,
            "description": "Get item by index",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "instance stored in this collection at the index",
                "type": "Object"
            },
            "class": "observableCollection",
            "module": "observe"
        },
        {
            "file": "lib\\observe\\observableCollection.js",
            "line": 152,
            "description": "Get observable objects contained in this container.",
            "itemtype": "method",
            "name": "getObservables",
            "return": {
                "description": "",
                "type": "Array of observable"
            },
            "class": "observableCollection",
            "module": "observe"
        },
        {
            "file": "lib\\jControl.js",
            "line": 23,
            "description": "Expose all public classes defined in the library.",
            "mainName": "jControl library",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "class": "",
            "module": "observe"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " lib\\observe\\bindFileProperty.js:22"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " lib\\observe\\fileHandlingModelFactory.js:22"
        },
        {
            "message": "Missing item type\nGet string for setting \"Accept\" in request. When outer.useJsonIo returns true, 'application/json' will be returned. If JSON is not used, derived class is expected to override this function to provide the correct string for setting \"Accept\" in request header.",
            "line": " lib\\comm\\restCallBase.js:146"
        },
        {
            "message": "Missing item type\nDispose the model. All subscribed callbacks will be released. All contained models are disposed.",
            "line": " lib\\observe\\collectionModelBase.js:348"
        },
        {
            "message": "Missing item type\nDispose the model. All subscribed callback will no longer be notified.",
            "line": " lib\\observe\\modelBase.js:583"
        }
    ]
}